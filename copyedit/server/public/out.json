[
{"errors": [{"i": [[3, 0, 9, 9, "Motivation"], [3, 0, 20, 20, "and"], [3, 0, 24, 24, "Approach"]], "s": " Motivation and Approach.\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 5\r\n\tUnique linkage, cost vector = (UNUSED=6 DIS=0 AND=0 LEN=0)\r\n\r\n[motivation] [and] [Approach] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\section{Motivation and Approach}\n", "spans": [[0, 34]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "We start by examining challenges for building layout languages and our high-level solution of automation through attribute grammars.  Throughout this and the remaining chapters, we focus on the design and implementation of one simple layout widget. We will show how our support of it generalizes to common layout languages and, more generally, computations over trees.\n", "spans": [[0, 132], [134, 248], [249, 369]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[7, 0, 12, 12, "Important"], [7, 0, 22, 22, "properties"], [7, 0, 33, 33, "for"], [7, 0, 37, 37, "layout"], [7, 0, 44, 44, "languages"]], "s": " Important properties for layout languages .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 7\r\n\tUnique linkage, cost vector = (UNUSED=8 DIS=0 AND=0 LEN=0)\r\n\r\n[Important] [properties] [for] [layout] [languages] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\subsection{Important properties for layout languages and others}\n", "spans": [[0, 66]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [8, 0, 90, 90, "websites"], "s": ["web sites", "web-sites"], "e": "spell"}, {"i": [8, 0, 480, 480, "markdown"], "s": ["mark down", "mark-down"], "e": "spell"}], "paragraph": "Layout languages are some of the most common -- for one gauge, there are over 634 million websites live in 2012, with 51 million added that year~                                                                                            . Beyond the CSS and HTML languages used for webpage layout, designers also use       ~[[CITE]] for document layout, D3~[[CITE]] for data visualization, Swing~[[Swing]] for GUI layout, and even specialize within these domains such as by using markdown for text. \n", "spans": [[0, 238], [239, 500]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "Popular layout languages foster designer productivity by providing abstractions that are rich and numerous.\n", "spans": [[0, 108]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [12, 0, 742, 742, "featuress"], "s": ["features"], "e": "spell"}], "paragraph": "The alternative is analogous to asking a programmer to write in a low-level language such as assembly: designers should not manually specify, for each element, the position on a canvas and the style. Instead, layout languages resemble constraint systems where designers  declare high-level properties. For example, the high-level program                    states that the words              and              should be rendered, and word              should follow line-wrapping rules for its positioning after             . Layout languages may provide quite complicated constraints -- for example, most document layout languages resort to defining their line wrapping rule  in a flexible low-level language. Likewise, they may provide many featuress, such as in the 250+ pages of rules for the CSS language. Adding to the sophistication, many languages support designers adding their own constraints, such as through macros in       ,  percentage constraints in CSS, and arbitrary functions in Adobe Flex~[[CITE]]. \n", "spans": [[0, 199], [200, 301], [302, 524], [525, 709], [710, 809], [810, 1018]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[14, 0, 0, 0, "The"], [14, 0, 4, 4, "richness"], [14, 0, 13, 13, "of"], [14, 0, 16, 16, "popular"], [14, 0, 24, 24, "layout"], [14, 0, 31, 31, "languages"], [14, 0, 41, 41, "comes"], [14, 0, 47, 47, "at"], [14, 0, 50, 50, "the"], [14, 0, 54, 54, "cost"], [14, 0, 59, 59, "of"], [14, 0, 62, 62, "of"], [14, 0, 65, 65, "complicating"], [14, 0, 78, 78, "their"], [14, 0, 84, 84, "design"], [14, 0, 91, 91, "and"], [14, 0, 95, 95, "implementation"]], "s": " The richness of popular layout languages comes at the cost of of com \bplicating their design and implementation:.\r\nNo complete linkages found.\r\nFound 16 linkages (16 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=0 AND=0 LEN=30)\r\n\r\n    +---------------------------------------------------------------------\r\n    |              +--------------------Ss--------------------+           \r\n    +------Wd------+      +------------Jp-----------+         |     +---Jp\r\n    |      +--Dmu--+--Mp--+     +----A----+----AN---+         +-MVp-+  +-D\r\n    |      |       |      |     |         |         |         |     |  |  \r\nLEFT-WALL the richness.n of popular.a layout.n languages.n comes.v at the \r\n\r\n\r\nXp--------------------------------------------------------------------+\r\n                                                                      |\r\n---+                  +--------Os-------+                             |\r\n*u-+----Mp---+---Mgp--+         +--D*u--+                             |\r\n   |         |        |         |       |                             |\r\ncost.n [of] of complicating.v their design.n and implementation.n [:] . \r\n\r\n\r\n    +---------------------------------------------------------------------\r\n    |              +--------------------Ss--------------------+           \r\n    +------Wd------+      +------------Jp-----------+         |     +---Jp\r\n    |      +--Dmu--+--Mp--+     +----A----+----AN---+         +-MVp-+  +-D\r\n    |      |       |      |     |         |         |         |     |  |  \r\nLEFT-WALL the richness.n of popular.a layout.n languages.n comes.v at the \r\n\r\n\r\nXp--------------------------------------------------------------------+\r\n                                                                      |\r\n---+                  +----------------Os----------------+            |\r\n*u-+----Mp---+---Mgp--+         +-----------D*u----------+            |\r\n   |         |        |         |                        |            |\r\ncost.n [of] of complicating.v their design.n and implementation.n [:] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "The richness of popular layout languages comes at the cost of of complicating their design and implementation:\n", "spans": [[0, 111]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[17, 0, 14, 14, "Safe"]], "s": " Safe .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 3\r\n\tUnique linkage, cost vector = (UNUSED=4 DIS=0 AND=0 LEN=0)\r\n\r\n[Safe] [.] \r\n\r\n", "e": "gram"}, {"i": [[17, 0, 14, 14, "Safe"], [17, 0, 19, 19, "semantics"], [17, 0, 31, 31, "Does"], [17, 0, 36, 36, "every"], [17, 0, 42, 42, "input"], [17, 0, 48, 48, "layout"], [17, 0, 55, 55, "have"], [17, 0, 60, 60, "exactly"], [17, 0, 68, 68, "one"], [17, 0, 72, 72, "unique"]], "s": " Safe semantics Does every input layout have exactly one unique .\r\nNo complete linkages found.\r\nFound 45 linkages (8 had no P.P. violations) at null count 3\r\n\tLinkage 1, cost vector = (UNUSED=3 DIS=1 AND=0 LEN=19)\r\n\r\n    +-------------------------------------------Xp-------------------\r\n    |                   +-------------------Sp-------------------+   \r\n    +---------Wd--------+-----------Bp----------+                +---\r\n    |        +-----A----+----Rn---+------Sp-----+                |   \r\n    |        |          |         |             |                |   \r\nLEFT-WALL safe.a semantics[!].n Does [every] input.v [layout] have.v \r\n\r\n\r\n-----------------------+\r\n                       |\r\n---Os------+           |\r\n    +--EN--+           |\r\n    |      |           |\r\nexactly.e one [unique] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "      \\textbf{Safe semantics.} Does every input layout have exactly one unique rendering? Are the constraints restricted enough such that an efficient implementation is feasible for low-power devices, big data sets, and fast animation? When a feature is added, does it conflict with anything of the above properties? We want an automated way to verify such properties.\n", "spans": [[0, 29], [29, 89], [90, 235], [236, 316], [317, 369]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[18, 0, 14, 14, "Safe"], [18, 0, 19, 19, "implementation"]], "s": " Safe implementation.\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 4\r\n\tUnique linkage, cost vector = (UNUSED=5 DIS=0 AND=0 LEN=0)\r\n\r\n[Safe] [implementation] [.] \r\n\r\n", "e": "gram"}, {"i": [[18, 0, 14, 14, "Safe"], [18, 0, 19, 19, "implementation"], [18, 0, 36, 36, "As"], [18, 0, 39, 39, "a"], [18, 0, 41, 41, "layout"], [18, 0, 48, 48, "language"], [18, 0, 57, 57, "grows"], [18, 0, 63, 63, "in"], [18, 0, 66, 66, "popularity"], [18, 0, 78, 78, "it"], [18, 0, 81, 81, "grows"]], "s": " Safe implementation As a layout language grows in popularity, it gro \bws .\r\nNo complete linkages found.\r\nFound 50 linkages (50 had no P.P. violations) at null count 1\r\n\tLinkage 1, cost vector = (UNUSED=1 DIS=2 AND=0 LEN=29)\r\n\r\n    +----------------------------------------------Xp-------------------\r\n    +---------------------------------------Xx--------------------------\r\n    +------------------------Wd------------------------+                \r\n    |                    +---------AN--------+         |                \r\n    |        +-----AN----+         +----AN---+----AN---+---Ss---+-MVp-+-\r\n    |        |           |         |         |         |        |     | \r\nLEFT-WALL safe.n implementation.n As [a] layout.n language.n grows.v in \r\n\r\n\r\n--------------------------+\r\n-------------+            |\r\n             |            |\r\n             |            |\r\n--Jp--+      +Wd+-Ss-+    |\r\n      |      |  |    |    |\r\npopularity.n , it grows.v . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "      \\textbf{Safe implementation.} As a layout language grows in popularity, it grows in features. Likewise, developers will port it to many platforms and optimize it, and in cases such as CSS, reimplement it from scratch. Does the implementation conform to the intended semantics? Conformance bugs for CSS plague developers~[[CITE]], and failures to match {      }'s semantics have killed multiple attempts to modernize the implementation. We want an automated way to ensure that the implementation matches the specification.\n", "spans": [[0, 34], [34, 99], [100, 223], [224, 282], [283, 441], [442, 528]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[19, 0, 14, 14, "Advanced"], [19, 0, 23, 23, "implementation"]], "s": " Advanced implementation.\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 4\r\n\tUnique linkage, cost vector = (UNUSED=5 DIS=0 AND=0 LEN=0)\r\n\r\n[Advanced] [implementation] [.] \r\n\r\n", "e": "gram"}, {"i": [[19, 0, 14, 14, "Advanced"], [19, 0, 23, 23, "implementation"], [19, 0, 40, 40, "Layout"], [19, 0, 47, 47, "languages"], [19, 0, 57, 57, "tend"], [19, 0, 62, 62, "to"], [19, 0, 65, 65, "add"], [19, 0, 69, 69, "feature"], [19, 0, 77, 77, "as"]], "s": " Advanced implementation Layout languages tend to add feature as .\r\nNo complete linkages found.\r\nFound 26 linkages (26 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=0 AND=0 LEN=13)\r\n\r\n    +------------------------------------------Xp--------------------------\r\n    +----------------------Wd---------------------+                        \r\n    |                        +---------AN---------+                        \r\n    |          +------A------+           +---AN---+----Sp---+--TO-+--I-+   \r\n    |          |             |           |        |         |     |    |   \r\nLEFT-WALL advanced.v implementation.n Layout languages.n tend.v to.r add.v \r\n\r\n\r\n---------------+\r\n               |\r\n               |\r\n               |\r\n               |\r\n[feature] [as] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "      \\textbf{Advanced implementation.} Layout languages tend to add feature as they evolve. However, the implementation of each feature also has demands that increase with time: improved speed and memory footprint, better debugging support, etc. Browser layout engines for CSS are currently over 100,000 lines of optimized C++ code, and most rich layout languages thus far have resisted parallelization. We want automation techniques to lower the implementation burden and more aggressively target those goals.\n", "spans": [[0, 38], [38, 92], [93, 246], [247, 404], [405, 512]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[26, 0, 17, 17, "Layout"], [26, 0, 24, 24, "engine"]], "s": " Layout engine .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 4\r\n\tUnique linkage, cost vector = (UNUSED=5 DIS=0 AND=0 LEN=0)\r\n\r\n[Layout] [engine] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\caption{\\textbf{Layout engine architecture.} }\n", "spans": [[0, 44], [44, 48]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "Our idea is to declaratively specify layout languages and automatically compile them into an efficient implementation. At runtime, an instance of layout will be processed through the previously generated layout engine (Figure~\\ref{fig:architecture}). The compiler is responsible for checking the semantics of the layout features and, by construction, provides a correct implementation. Furthermore, instead of manually optimizing the code for every individual feature, language designers instead write generic compiler optimizations. As a similar implementation benefit, we automatically target multiple platforms for the same layout language, such as scripting languages in order to use their debuggers, and multicore and GPU languages to gain magnitudes of speedups.\n", "spans": [[0, 118], [119, 250], [251, 385], [386, 533], [534, 769]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "We show that the attribute grammar formalism supports specification of layout languages. It is unclear how to encode complicated layout language features with the traditional formalism, so we support a rich form of attribute grammars and reduce reasoning about them to handling a more traditional formalism (reducer in Figure~\\ref{fig:architecture}). The remainder of this chapter introduces the high-level attribute grammar formalism, how to specify layout languages using it, and an intuition for the reduction into a lower-level formalism.\n", "spans": [[0, 88], [89, 350], [351, 543]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[110, 0, 9, 9, "For"], [110, 0, 13, 13, "a"], [110, 0, 15, 15, "language"], [110, 0, 24, 24, "of"], [110, 0, 27, 27, "horizontal"], [110, 0, 38, 38, "boxes"], [110, 0, 45, 45, "(a)"], [110, 0, 49, 49, "input"], [110, 0, 55, 55, "tree"], [110, 0, 60, 60, "to"], [110, 0, 63, 63, "solve"], [110, 0, 69, 69, "and"], [110, 0, 73, 73, "(b)"], [110, 0, 77, 77, "attribute"], [110, 0, 87, 87, "grammar"], [110, 0, 95, 95, "specifying"], [110, 0, 106, 106, "the"], [110, 0, 110, 110, "layout"], [110, 0, 117, 117, "language"]], "s": " For a language of horizontal boxes: (a) input tree to solve and (b)  \battribute grammar specifying the layout language.\r\nNo complete linkages found.\r\nFound 4 linkages (4 had no P.P. violations) at null count 3\r\n\tLinkage 1, cost vector = (UNUSED=3 DIS=4 AND=0 LEN=83)\r\n\r\n    +--------------------------------------------------------------------\r\n    +-----------------------------------------------------Wi-------------\r\n    |       +-------------------------------------------------CO---------\r\n    |       |                                   +------------MXp---------\r\n    |       |                                   |        +--------Xd-----\r\n    |       +----Jp----+      +--------Jp-------+        | +-------Ds----\r\n    |       |   +--Dsu-+--Mp--+       +----A----+        | |        +---A\r\n    |       |   |      |      |       |         |        | |        |    \r\nLEFT-WALL for.p a language.n of horizontal.a boxes.n [:] ( a [)] input.n \r\n\r\n\r\n------------Xp-----------------------------------------------------------\r\n---------------------------------------+                                 \r\n---------------------------------------+                                 \r\n---+                                   |                                 \r\n---+-------------Xc-------------+      |                      +----------\r\n---+-----Bs----+                |      |                      |       +--\r\nN--+--R--+--I--+                |      +----Os----+-----Mg----+       |  \r\n   |     |     |                |      |          |           |       |  \r\ntree.n to.r solve.v and [(] b.v ) attribute.v grammar.n specifying.v the \r\n\r\n\r\n--------------------+\r\n                    |\r\n                    |\r\n                    |\r\n-Os-----------+     |\r\n-----D*u------+     |\r\n    +----AN---+     |\r\n    |         |     |\r\nlayout.n language.n . \r\n\r\n\r\n    +--------------------------------------------------------------------\r\n    +-----------------------------------------------------Wi-------------\r\n    |       +-------------------------------------------------CO---------\r\n    |       |                                   +------------MXp---------\r\n    |       |                                   |        +--------Xd-----\r\n    |       +----Jp----+      +--------Jp-------+        | +-------Ds----\r\n    |       |   +--Dsu-+--Mp--+       +----A----+        | |        +---A\r\n    |       |   |      |      |       |         |        | |        |    \r\nLEFT-WALL for.p a language.n of horizontal.a boxes.n [:] ( a [)] input.n \r\n\r\n\r\n------------Xp-----------------------------------------------------------\r\n---------------------------------------+                                 \r\n---------------------------------------+                                 \r\n---+                                   |                                 \r\n---+-------------Xc-------------+      |                      +----------\r\n---+------------Bs-----------+  |      |                      |       +--\r\nN--+--R--+---------I---------+  |      +----Os----+-----Mg----+       |  \r\n   |     |                   |  |      |          |           |       |  \r\ntree.n to.r solve.v and [(] b.v ) attribute.v grammar.n specifying.v the \r\n\r\n\r\n--------------------+\r\n                    |\r\n                    |\r\n                    |\r\n-Os-----------+     |\r\n-----D*u------+     |\r\n    +----AN---+     |\r\n    |         |     |\r\nlayout.n language.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "\\caption{For a language of horizontal boxes: (a) input tree to solve and (b) attribute grammar specifying the layout language. Specification language of attribute grammars shown in (c).%and (c) dynamic data dependencies.\n", "spans": [[0, 126], [127, 221]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[116, 0, 9, 9, "Background"], [116, 0, 21, 21, "Layout"], [116, 0, 28, 28, "with"], [116, 0, 33, 33, "Classical"], [116, 0, 43, 43, "Attribute"]], "s": " Background: Layout with Classical Attribute .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 8\r\n\tUnique linkage, cost vector = (UNUSED=9 DIS=0 AND=0 LEN=0)\r\n\r\n[Background] [:] [Layout] [with] [Classical] [Attribute] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\section{Background: Layout with Classical Attribute Grammar}\n", "spans": [[0, 62]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[118, 0, 0, 0, "This"], [118, 0, 5, 5, "section"], [118, 0, 13, 13, "describes"], [118, 0, 23, 23, "specifying"], [118, 0, 34, 34, "a"], [118, 0, 36, 36, "simple"], [118, 0, 43, 43, "layout"], [118, 0, 50, 50, "language"], [118, 0, 59, 59, "as"], [118, 0, 62, 62, "an"], [118, 0, 65, 65, "attribute"], [118, 0, 75, 75, "grammar"], [118, 0, 83, 83, "and"], [118, 0, 87, 87, "two"], [118, 0, 91, 91, "classical"], [118, 0, 101, 101, "implementation"], [118, 0, 116, 116, "strategies"]], "s": " This section describes specifying a simple layout language as an att \bribute grammar and two classical implementation strategies.\r\nNo complete linkages found.\r\nFound 40 linkages (30 had no P.P. violations) at null count 1\r\n\tLinkage 1, cost vector = (UNUSED=1 DIS=1 AND=1 LEN=38)\r\n\r\n    +-------------------------------------------------------------------\r\n    |                           +-------------------------MVp-----------\r\n    |                           +---------------------Os----------------\r\n    +-------Wd-------+          |                   +-----------Dsu-----\r\n    |        +--Dsu--+----Ss----+                   |     +----A---+----\r\n    |        |       |          |                   |     |        |    \r\nLEFT-WALL this.d section.n describes.v [specifying] a simple.a layout.n \r\n\r\n\r\n-----------Xp-----------------------------------------------------------------\r\n-------------+                                                                \r\n-----+       +----------Jp---------+                                          \r\n-----+       |   +-------Dsu-------+                                          \r\nAN---+       |   |      +----AN----+                                          \r\n     |       |   |      |          |                                          \r\nlanguage.n as.p an attribute.n grammar.n and two classical.a implementation.n \r\n\r\n\r\n-------------+\r\n             |\r\n             |\r\n             |\r\n             |\r\n             |\r\nstrategies.n . \r\n\r\n\r\n    +-------------------------------------------------------------------\r\n    |                           +-------------------------MVp-----------\r\n    |                           +---------------------Os----------------\r\n    +-------Wd-------+          |                   +-----------Dsu-----\r\n    |        +--Dsu--+----Ss----+                   |     +----A---+----\r\n    |        |       |          |                   |     |        |    \r\nLEFT-WALL this.d section.n describes.v [specifying] a simple.a layout.n \r\n\r\n\r\n-----------Xp-----------------------------------------------------------------\r\n-------------+                                                                \r\n-----+       +----------------------------------Jp----------------------------\r\n-----+       |                                +-----------------Dmc-----------\r\nAN---+       |                                |       +-------A------+------AN\r\n     |       |                                |       |              |        \r\nlanguage.n as.p an attribute.n grammar.n and two classical.a implementation.n \r\n\r\n\r\n-------------+\r\n             |\r\n------+      |\r\n------+      |\r\n------+      |\r\n      |      |\r\nstrategies.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "This section describes specifying a simple layout language as an attribute grammar and two classical implementation strategies. We reuse the example throughout our work to explore various concepts.\n", "spans": [[0, 127], [128, 198]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "\\subsection{Attribute Grammars}\n", "spans": [[0, 32]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [124, 0, 393, 393, "side-by-side"], "s": [], "e": "spell"}], "paragraph": "Consider solving the tree of horizontal boxes shown in Figure~                                . As input, a webpage author provides a tree with constraints (Figure~                                    ). Only some node attribute values are provided: in this case, only the widths and heights of leaf nodes. The meaning of a horizontal layout is that, as is visualized, the boxes will be placed side-by-side. The layout engine must solve for all remaining x, y, width, and height attributes. \n", "spans": [[0, 95], [96, 202], [203, 305], [306, 406], [407, 491]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [126, 0, 789, 789, "nullary"], "s": [], "e": "spell"}], "paragraph": "We declaratively specify the layout language of horizontal boxes,         ,  as shown in Figure~                                  , with an attribute grammar~                                 . First, the specification defines the set of well-formed input trees as the derivations of a context-free grammar. We use the standard notation~[[CITE]]. In this case, a document is an unbalanced binary tree of arbitrary depth where the root node has label            and intermediate nodes have label              . Second, the specification defines semantic functions that relate attributes associated with each node. For example, the width of an intermediate horizontal node is the sum of its children widths. Likewise, the width of a leaf node is provided by the user, which is encoded by the nullary function call $input_w()$:\n", "spans": [[0, 192], [193, 306], [307, 345], [346, 508], [509, 611], [612, 704], [705, 824]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "The specification intentionally does not define the evaluation order. For example, the specification does not state whether to compute a node's width before its height. Likewise, our optimized approach will compute the attributes as a sequence of tree traversals, but the specification does not state what those traversals are. Leaving the evaluation order unspecified provides freedom for our compilers to pick an efficient parallel order. Irrespective of whatever evaluation order is ultimately used to solve for the attribute values, the statements define constraints that must hold over the computed result. Attribute grammars can therefore be thought of as a single assignment language where attributes are dataflow variables~[[CITE]].\n", "spans": [[0, 69], [70, 168], [169, 327], [328, 440], [441, 611], [612, 741]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [140, 0, 608, 608, "nullary"], "s": [], "e": "spell"}], "paragraph": "The language of attribute grammars is defined in Figure~                        . In addition the defining the context free grammar, it supports single-assignment constraints over attributes of nodes in a production. Our example uses the following encoding. Semantic functions are pure and left uninterpreted, so, for example, we encode the addition of widths as ``                                             ''. Our program analysis techniques do not need to know the contents of the function, just that the output of a call depends purely on the inputs.  For the same reason, we encode constant values as nullary function calls. \n", "spans": [[0, 81], [82, 216], [217, 257], [258, 413], [414, 556], [558, 633]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [142, 0, 137, 137, "sec"], "s": ["Dec", "sea", "sect", "see", "set", "sew", "sex", "sic", "spec"], "e": "spell"}, {"i": [142, 0, 141, 141, "desugaring"], "s": [], "e": "spell"}], "paragraph": "To specify grammars more complicated than         , we describe linguistic extensions for richer functional specifications (Section~\\ref{sec:desugaring}) and, to control the evaluation order, behavioral specification (Chapters~\\ref{chap:3} and \\ref{chap:4}).\n", "spans": [[0, 259]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [153, 0, 97, 97, "ZZZ"], "s": [], "e": "spell"}], "paragraph": "\\caption{\\textbf{Dynamic data dependencies and evaluation}. Shown for constraint tree  in Figure~ZZZ~(a). Circles denote attributes, with black circles denote attributes with resolved dependencies such as \\sched{input()}s. Thin lines show data dependencies and thick lines show production derivations. Second chart shows the dependency graph resulting from evaluating all source nodes and marking them as resolved.}\n", "spans": [[0, 59], [60, 105], [106, 301], [302, 414], [414, 416]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[158, 0, 12, 12, "Dynamic"], [158, 0, 20, 20, "data"], [158, 0, 25, 25, "dependencies"], [158, 0, 38, 38, "and"], [158, 0, 42, 42, "dynamic"]], "s": " Dynamic data dependencies and dynamic .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 7\r\n\tUnique linkage, cost vector = (UNUSED=8 DIS=0 AND=0 LEN=0)\r\n\r\n[Dynamic] [data] [dependencies] [and] [dynamic] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\subsection{Dynamic data dependencies and dynamic evaluation}\n", "spans": [[0, 62]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "A simple and classic evaluation strategy is to \\emph{dynamically} compute over a tree. The evaluator dynamically follows the dynamic data dependencies between instances of attributes. The dynamic evaluation strategy is too slow for our use cases, but it introduces the key concepts of dynamic data dependencies, the dynamic semantics of attributes grammars, and the corresponding dynamic interpreter.\n", "spans": [[0, 86], [87, 183], [184, 401]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "An instance of a document corresponds to the dependency graph shown in Figure~                               . Each attribute of a tree node is either a source, meaning its value can be computed based on other known values, or it cannot be evaluated until other attribute values are known. It is a dynamic dependency graph in that each data dependency in the static code may be instantiated as multiple data dependencies given a tree at runtime. \n", "spans": [[0, 110], [111, 289], [290, 447]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [163, 0, 546, 546, "lefthand"], "s": ["left hand", "left-hand"], "e": "spell"}], "paragraph": "The dynamic data dependency graph leads to a simple semantics for the result of evaluation. The graph corresponds to a system of equations where edges link instance variables. For example, static code                                             instantiates twice for the Figure~                               : once for each $x$ attribute with an incoming elbow connector. The value of both $x$s are constrained by distinct instances of the above constraint. If the dependency graph is a directed acyclic graph and each attribute appears on the lefthand side of exactly one equality statement (\\emph{dataflow variables}), there is exactly one solution to the system of equations.\n", "spans": [[0, 91], [92, 175], [176, 373], [374, 459], [460, 681]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[165, 0, 0, 0, "A"], [165, 0, 2, 2, "simple"], [165, 0, 9, 9, "procedure"], [165, 0, 19, 19, "solves"], [165, 0, 26, 26, "an"], [165, 0, 29, 29, "instance"], [165, 0, 38, 38, "of"], [165, 0, 41, 41, "a"], [165, 0, 43, 43, "system"], [165, 0, 50, 50, "of"], [165, 0, 53, 53, "equations"], [165, 0, 64, 64, "topological"], [165, 0, 76, 76, "traversal"]], "s": " A simple procedure solves an instance of a system of equations: topo \blogical traversal.\r\nNo complete linkages found.\r\nFound 77 linkages (2 had no P.P. violations) at null count 3\r\n\tLinkage 1, cost vector = (UNUSED=3 DIS=2 AND=0 LEN=19)\r\n\r\n    +------------------------------------------------------Xp------------\r\n    +----------Wd---------+                                              \r\n    |     +------Dsu------+          +-----Os-----+      +---Js--+       \r\n    |     |     +----A----+----Ss----+     +--Ds--+--Mp--+ +--Ds-+--Mp-+-\r\n    |     |     |         |          |     |      |      | |     |     | \r\nLEFT-WALL a simple.a procedure.n solves.v an instance.n of a system.n of \r\n\r\n\r\n------------------------------------------+\r\n                                          |\r\n                                          |\r\n-Jp--+                                    |\r\n     |                                    |\r\nequations.n [:] [topological] [traversal] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}, {"i": [[165, 0, 0, 0, "A"], [165, 0, 2, 2, "simple"], [165, 0, 9, 9, "procedure"], [165, 0, 19, 19, "solves"], [165, 0, 26, 26, "an"], [165, 0, 29, 29, "instance"], [165, 0, 38, 38, "of"], [165, 0, 41, 41, "a"], [165, 0, 43, 43, "system"], [165, 0, 50, 50, "of"], [165, 0, 53, 53, "equations"], [165, 0, 64, 64, "topological"], [165, 0, 76, 76, "traversal"], [165, 0, 87, 87, "The"], [165, 0, 91, 91, "algorithm"], [165, 0, 101, 101, "is"], [165, 0, 104, 104, "as"], [165, 0, 107, 107, "follows"]], "s": " A simple procedure solves an instance of a system of equations: topo \blogical traversal The algorithm is as follows:.\r\nNo complete linkages found.\r\nFound 4 linkages (4 had no P.P. violations) at null count 4\r\n\tLinkage 1, cost vector = (UNUSED=4 DIS=4 AND=0 LEN=42)\r\n\r\n    +--------------------------------------------------------------------\r\n    +---------------------------------------Xx---------------------------\r\n    +----------Wd---------+                                              \r\n    |     +------Dsu------+          +-----Os-----+      +---Js--+       \r\n    |     |     +----A----+----Ss----+     +--Ds--+--Mp--+ +--Ds-+--Mp-+-\r\n    |     |     |         |          |     |      |      | |     |     | \r\nLEFT-WALL a simple.a procedure.n solves.v an instance.n of a system.n of \r\n\r\n\r\n-------Xp------------------------------------------------------------\r\n------------+                                                        \r\n            +---------------Wd--------------+                        \r\n            |       +-----------A-----------+                        \r\n-Jp--+      |       |              +----A---+-------------Ss---------\r\n     |      |       |              |        |                        \r\nequations.n : topological.a traversal[!].a The [algorithm] [is] [as] \r\n\r\n\r\n--------------+\r\n              |\r\n              |\r\n              |\r\n----+         |\r\n    |         |\r\nfollows.v [:] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "A simple procedure solves an instance of a system of equations: topological traversal. The algorithm is as follows:\n", "spans": [[0, 86], [87, 116]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[180, 0, 17, 17, "Dynamic"], [180, 0, 25, 25, "attribute"], [180, 0, 35, 35, "grammar"], [180, 0, 43, 43, "evaluator"], [180, 0, 55, 55, "It"], [180, 0, 58, 58, "selects"], [180, 0, 66, 66, "attributes"], [180, 0, 77, 77, "in"], [180, 0, 80, 80, "a"], [180, 0, 82, 82, "safe"], [180, 0, 87, 87, "order"], [180, 0, 93, 93, "by"], [180, 0, 96, 96, "dynamically"], [180, 0, 108, 108, "removing"], [180, 0, 117, 117, "dependency"], [180, 0, 128, 128, "edges"], [180, 0, 134, 134, "as"], [180, 0, 137, 137, "they"]], "s": " Dynamic attribute grammar evaluator It selects attributes in a safe  \border by dynamically removing dependency edges as they .\r\nNo complete linkages found.\r\nFound 281 linkages (281 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=3 AND=0 LEN=33)\r\n\r\n    +---------------------------------------------------------------\r\n    |                                                         +-----\r\n    |                                                         |     \r\n    +-------------------------Wd------------------------+     +-----\r\n    |        +----AN---+----AN----+-----AN-----+---GN---+--Ss-+-----\r\n    |        |         |          |            |        |     |     \r\nLEFT-WALL Dynamic attribute.n grammar.n evaluator[!].n It selects.v \r\n\r\n\r\n--------------Xp--------------------------------------------------------\r\n-------------MVp------------------+                                     \r\n              +------Jp-----+     |                                     \r\n---MVp--------+ +----Dsu----+     +--------Mgp-------+----------Op------\r\nOp----+       | |    +---A--+     |      +-----Em----+           +----AN\r\n      |       | |    |      |     |      |           |           |      \r\nattributes.n in a safe.a order.n by dynamically removing.v dependency.n \r\n\r\n\r\n--------------------+\r\n                    |\r\n                    |\r\n---+                |\r\n---+                |\r\n   |                |\r\nedges.n [as] [they] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "\\caption{\\textbf{Dynamic attribute grammar evaluator.} It selects attributes in a safe order by dynamically removing dependency edges as they are resolved. }\n", "spans": [[0, 53], [53, 155], [156, 158]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [183, 0, 376, 376, "acylic"], "s": ["acrylic", "acyclic"], "e": "spell"}], "paragraph": "The algorithm literately finds an attribute whose dependencies have all been previously resolved, evaluates the attribute, and repeats. If the input graph is a directed acyclic graph, this procedure is guaranteed to terminate. The insight is that a directed acyclic graph has at least one fringe node, the loop removes them, and removing these nodes yields a smaller directed acylic graph.\n", "spans": [[0, 135], [136, 226], [227, 390]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "The dynamic evaluation strategy provides a small explanation for the natural semantics, but it leaves several challenges. First, runtime manipulation of a dynamic dependency graph introduces high overheads because every dynamic dependency edge must be manipulated. Second, it is unsafe. For example, a cycle in the dependency graph causes the above evaluation strategy to get stuck, so dynamic evaluators must introduce runtime cycle check. Designers can build layout widgets that, depending on how they are invoked, fail to display!\n", "spans": [[0, 121], [122, 264], [265, 286], [287, 440], [441, 534]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [228, 0, 17, 17, "EBNF"], "s": [], "e": "spell"}], "paragraph": "\\caption{\\textbf{EBNF Syntax for key forms in the functional specification language.} We omit semicolons and other decorations; see the examples for more detailed forms.}\n", "spans": [[0, 84], [84, 169], [169, 171]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [233, 0, 9, 9, "Desugaring"], "s": [], "e": "spell"}], "paragraph": "\\section{Desugaring Loops and Other Modern Constructs}\n", "spans": [[0, 55]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "The attribute grammar formalism was invented for describing semantics~[[CITE]] and before many modern constructs became mainstream: we had to design extensions for improved expressiveness and maintainability. Our extensions exploit concepts from structured, object-oriented, and functional programming. Other language designers have build such extensions as well~[[CITE]]: our challenge was to make expressive extensions that facilitate effective parallelization and do not overly complicate language and tool implementation. This section documents the language features and how they simplify implementation, and leaves performance optimization to the next chapter.\n", "spans": [[0, 208], [209, 302], [303, 525], [526, 666]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [238, 0, 24, 24, "pre-"], "s": ["are", "ere", "ire", "ore", "pare", "per", "pie", "Poe", "pore", "prep", "prey", "pro", "pry", "pure", "pyre", "re"], "e": "spell"}, {"i": [238, 0, 58, 58, "desugaring"], "s": [], "e": "spell"}, {"i": [238, 0, 545, 545, "ANTLR"], "s": ["ANTLER"], "e": "spell"}, {"i": [238, 0, 555, 555, "OMeta"], "s": ["Meta", "Omega"], "e": "spell"}], "paragraph": "Our key insight is that pre- and post-processing supports desugaring a feature-rich attribute grammar into the canonical attribute grammar notation. Tools then operate at the most appropriate stage, such as our scheduler on the small, canonical attribute grammar representation. Likewise, our code generators take a generated schedule and relate it back to a representation from early in the preprocessing stage. Many of our features are built as explicit compiler stages, but over time, we found that declarative tree rewriting systems such as ANTLR and OMeta support automating individual stages.\n", "spans": [[0, 148], [149, 278], [279, 412], [413, 599]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [240, 0, 113, 113, "coresyntax"], "s": ["core syntax", "core-syntax"], "e": "spell"}], "paragraph": "The subsections below illustrate the various features and how they relate to attribute grammars. Figure~\\ref{fig:coresyntax} shows the syntax of our functional specification language. Section~\\ref{??} shows the optional extension for behavioral specification and Section~\\ref{??} for SIMD rendering macros. \n", "spans": [[0, 96], [97, 183], [184, 199], [199, 278], [278, 308]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [317, 0, 48, 48, "Subfigures"], "s": ["Sub figures", "Sub-figures"], "e": "spell"}], "paragraph": "\\caption{\\textbf{Interfaces for tree grammars}. Subfigures show manually encoding multiple production right-hand sides, an encoding that uses a            non-terminal for indirection, and the high-level encoding using interfaces and classes.}\n", "spans": [[0, 47], [48, 242], [242, 244]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[334, 0, 17, 17, "Input"], [334, 0, 23, 23, "tree"], [334, 0, 28, 28, "as"], [334, 0, 31, 31, "graph"], [334, 0, 37, 37, "with"], [334, 0, 42, 42, "labeled"], [334, 0, 50, 50, "nodes"]], "s": " Input tree as graph with labeled nodes .\r\nNo complete linkages found.\r\nFound 2 linkages (2 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=2 AND=0 LEN=15)\r\n\r\n    +----------------------------Xp----------------------------+\r\n    |        +---------------------Op---------------------+    |\r\n    |        |                   +-----------AN-----------+    |\r\n    +---Wi---+       +-----AN----+               +----A---+    |\r\n    |        |       |           |               |        |    |\r\nLEFT-WALL input.v tree.n [as] graph.n [with] labeled.v nodes.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}, {"i": [[334, 0, 17, 17, "Input"], [334, 0, 23, 23, "tree"], [334, 0, 28, 28, "as"], [334, 0, 31, 31, "graph"], [334, 0, 37, 37, "with"], [334, 0, 42, 42, "labeled"], [334, 0, 50, 50, "nodes"], [334, 0, 56, 56, "and"], [334, 0, 60, 60, "edges"], [334, 0, 68, 68, "Specified"], [334, 0, 78, 78, "in"], [334, 0, 81, 81, "the"]], "s": " Input tree as graph with labeled nodes and edges Specified in the .\r\nNo complete linkages found.\r\nFound 12 linkages (12 had no P.P. violations) at null count 4\r\n\tLinkage 1, cost vector = (UNUSED=4 DIS=2 AND=0 LEN=23)\r\n\r\n    +--------------------------------------------Xp------------------------\r\n    |        +---------------------------Ss---------------------------+    \r\n    |        |                          +-------Jp------+             +----\r\n    +---Wd---+------Mp-----+-----Mp-----+      +----A---+             +---O\r\n    |        |             |            |      |        |             |    \r\nLEFT-WALL input.n [tree] as.p [graph] with labeled.v nodes.n [and] edges.v \r\n\r\n\r\n-------------------+\r\n                   |\r\n---K-------+       |\r\ns---+      |       |\r\n    |      |       |\r\nSpecified in [the] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "\\caption{\\textbf{Input tree as graph with labeled nodes and edges}. Specified in the JSON notation.}\n", "spans": [[0, 67], [68, 99], [99, 101]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[338, 0, 12, 12, "Interfaces"], [338, 0, 23, 23, "for"], [338, 0, 27, 27, "Encoding"], [338, 0, 36, 36, "Tree"]], "s": " Interfaces for Encoding Tree .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 6\r\n\tUnique linkage, cost vector = (UNUSED=7 DIS=0 AND=0 LEN=0)\r\n\r\n[Interfaces] [for] [Encoding] [Tree] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\subsection{Interfaces for Encoding Tree Grammars}\n", "spans": [[0, 51]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "Attribute grammars are an extension to the tree grammar formalism for defining input trees, so improving the abstraction capabilities of tree grammars also aids the ability to structure attribute grammars. In particular, we found the need to support  abstracting over similar types of non-terminals. Our solution is to provide a notion of classes and interfaces. Our core extension is macro-expressible with attribute grammars and therefore reduces implementation requirements, though it is still important enough that it merits deeper compiler support. \n", "spans": [[0, 205], [206, 299], [300, 362], [363, 555]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "Consider the code duplication performed when extending        with vertical boxes. The children of a             could be a horizontal box or a vertical box, and the same for the children of a vertical box. Figure~\\ref{fig:face:problem} shows that the 3 productions of        grew to be 11. The example highlights that canonical attribute grammars cannot abstract over node types. Adding a new box type requires modifying all previous box classes, and in the presence multiple children, extension suffers exponential costs. \n", "spans": [[0, 82], [83, 206], [207, 290], [291, 380], [381, 525]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [344, 0, 96, 96, "iface"], "s": ["face", "if ace", "if-ace"], "e": "spell"}, {"i": [344, 0, 217, 217, "lefthand"], "s": ["left hand", "left-hand"], "e": "spell"}, {"i": [344, 0, 294, 294, "righthand"], "s": ["right hand", "right-hand"], "e": "spell"}, {"i": [344, 0, 371, 371, "righthand"], "s": ["right hand", "right-hand"], "e": "spell"}], "paragraph": "To abstract over node types, we introduce the notion of classes and interfaces (Figure~\\ref{fig:iface:clean}). Classes are similar to the productions of an attribute grammar: the class name specifies the production's lefthand side non-terminal and the children block specifies the production's righthand side. Unlike attribute grammars, an interface name is used for the righthand side rather than the class name.             and             implement interface            , so any class specified to have a             child can have a             or             child within the concrete tree. \n", "spans": [[0, 110], [111, 309], [310, 413], [426, 597]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [347, 0, 246, 246, "lefthand-side"], "s": [], "e": "spell"}, {"i": [347, 0, 483, 483, "iface"], "s": ["face", "if ace", "if-ace"], "e": "spell"}, {"i": [347, 0, 509, 509, "iface"], "s": ["face", "if ace", "if-ace"], "e": "spell"}], "paragraph": "Classes and interfaces are formally equivalent to tree grammars in the sense of a 1-to-1 correspondence between trees described by both. First, a tree grammar can be expressed with classes and interfaces by treating all productions with the same lefthand-side non-terminal as different classes belonging to the same interface. In the other direction, each interface can be expressed as a production that derives the classes, and the classes expand into productions. Figures~\\ref{fig:iface:clean} and \\ref{fig:iface:rewrite} demonstrate the correspondence for       . The induced implementation requirements are therefore slight in the sense that the construct is sugar for a pattern in the canonical attribute grammars. \n", "spans": [[0, 136], [137, 326], [327, 465], [466, 566], [567, 721]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [349, 0, 224, 224, "hboxjson"], "s": [], "e": "spell"}], "paragraph": "We depart from the correspondence for the encoding of trees in two ways. First, we represent input as a tree with labeled nodes and edges. Node labels denote the class and edge labels specify child bindings. Figure~\\ref{fig:hboxjson} uses the JSON format common to dynamic languages for an instance of a tree in       . By naming children, such as             and             , we eliminate sensitivity to their order within a code block. With order sensitivity, adding a middle child               would needlessly require refactoring references to the repositioned element             . Likewise, reordering children in the input data does not require refactoring the attribute grammar.\n", "spans": [[0, 72], [73, 138], [139, 207], [208, 319], [320, 438], [439, 588], [589, 689]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "Our second departure from the canonical attribute grammar encoding optimizes the data representation by eliding intermediate interface nodes. The reduction to attribute grammars suggests adding a new non-terminal for each interface, but doing so in the data representation doubles the number of nodes in the concrete tree. Making the interface pattern a language construct with compiler support eliminates associated costs, such as cutting file size for runtime parsing of big data visualizations.\n", "spans": [[0, 141], [142, 322], [323, 498]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[368, 0, 17, 17, "Input"], [368, 0, 23, 23, "tree"], [368, 0, 28, 28, "as"], [368, 0, 31, 31, "graph"], [368, 0, 37, 37, "with"], [368, 0, 42, 42, "labeled"], [368, 0, 50, 50, "nodes"]], "s": " Input tree as graph with labeled nodes .\r\nNo complete linkages found.\r\nFound 2 linkages (2 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=2 AND=0 LEN=15)\r\n\r\n    +----------------------------Xp----------------------------+\r\n    |        +---------------------Op---------------------+    |\r\n    |        |                   +-----------AN-----------+    |\r\n    +---Wi---+       +-----AN----+               +----A---+    |\r\n    |        |       |           |               |        |    |\r\nLEFT-WALL input.v tree.n [as] graph.n [with] labeled.v nodes.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}, {"i": [[368, 0, 17, 17, "Input"], [368, 0, 23, 23, "tree"], [368, 0, 28, 28, "as"], [368, 0, 31, 31, "graph"], [368, 0, 37, 37, "with"], [368, 0, 42, 42, "labeled"], [368, 0, 50, 50, "nodes"], [368, 0, 56, 56, "and"], [368, 0, 60, 60, "edges"], [368, 0, 68, 68, "Specified"], [368, 0, 78, 78, "in"], [368, 0, 81, 81, "the"]], "s": " Input tree as graph with labeled nodes and edges Specified in the .\r\nNo complete linkages found.\r\nFound 12 linkages (12 had no P.P. violations) at null count 4\r\n\tLinkage 1, cost vector = (UNUSED=4 DIS=2 AND=0 LEN=23)\r\n\r\n    +--------------------------------------------Xp------------------------\r\n    |        +---------------------------Ss---------------------------+    \r\n    |        |                          +-------Jp------+             +----\r\n    +---Wd---+------Mp-----+-----Mp-----+      +----A---+             +---O\r\n    |        |             |            |      |        |             |    \r\nLEFT-WALL input.n [tree] as.p [graph] with labeled.v nodes.n [and] edges.v \r\n\r\n\r\n-------------------+\r\n                   |\r\n---K-------+       |\r\ns---+      |       |\r\n    |      |       |\r\nSpecified in [the] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "\\caption{\\textbf{Input tree as graph with labeled nodes and edges}. Specified in the JSON notation.}\n", "spans": [[0, 67], [68, 99], [99, 101]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[373, 0, 12, 12, "Interfaces"], [373, 0, 23, 23, "for"], [373, 0, 27, 27, "attributes"], [373, 0, 38, 38, "and"], [373, 0, 42, 42, "information"]], "s": " Interfaces for attributes and information .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 2\r\n\tUnique linkage, cost vector = (UNUSED=2 DIS=0 AND=0 LEN=7)\r\n\r\n    +---------------------------Xp--------------------------+\r\n    +----Wd----+--------Ss-------+--------Os--------+       |\r\n    |          |                 |                  |       |\r\nLEFT-WALL Interfaces [for] attributes.v [and] information.n . \r\n\r\n", "e": "gram"}], "paragraph": "\\subsection{Interfaces for attributes and information hiding.}\n", "spans": [[0, 61], [61, 63]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "Our system provides lightweight specification annotations for different types of attributes, and coupled with the interface construct, it supports defining relationships between attributes across different classes.\n", "spans": [[0, 215]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[376, 0, 0, 0, "Each"], [376, 0, 5, 5, "static"], [376, 0, 12, 12, "attribute"], [376, 0, 22, 22, "is"], [376, 0, 25, 25, "annotated"], [376, 0, 35, 35, "with"], [376, 0, 40, 40, "its"], [376, 0, 44, 44, "assignment"], [376, 0, 55, 55, "type"], [376, 0, 60, 60, "and"], [376, 0, 64, 64, "its"], [376, 0, 68, 68, "embedded"], [376, 0, 77, 77, "value"], [376, 0, 83, 83, "type"]], "s": " Each static attribute is annotated with its assignment type and its  \bembedded value type:.\r\nNo complete linkages found.\r\nFound 2 linkages (2 had no P.P. violations) at null count 1\r\n\tLinkage 1, cost vector = (UNUSED=1 DIS=3 AND=1 LEN=27)\r\n\r\n    +---------------------------------------------------------Xp-----------\r\n    +-----------Wd-----------+                         +----------Js-------\r\n    |       +-------Ds-------+                         |   +--------Ds-----\r\n    |       |      +----A----+---Ss---+---Pv--+---MVp--+   |        +----AN\r\n    |       |      |         |        |       |        |   |        |      \r\nLEFT-WALL each static.a attribute.n is.v annotated.v with its assignment.n \r\n\r\n\r\n---------------------------------------------+\r\n---+                                         |\r\n---+                                         |\r\n---+                                         |\r\n   |                                         |\r\ntype.n and its embedded.v value.n type.n [:] . \r\n\r\n\r\n    +---------------------------------------------------------Xp-----------\r\n    +-----------Wd-----------+                         +-------------------\r\n    |       +-------Ds-------+                         |                   \r\n    |       |      +----A----+---Ss---+---Pv--+---MVp--+                   \r\n    |       |      |         |        |       |        |                   \r\nLEFT-WALL each static.a attribute.n is.v annotated.v with its assignment.n \r\n\r\n\r\n---------------------------------------------+\r\n--------Js---------------------------+       |\r\n            +-----------Ds-----------+       |\r\n            |       +----A---+---AN--+       |\r\n            |       |        |       |       |\r\ntype.n and its embedded.v value.n type.n [:] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "Each static attribute is annotated with its assignment type and its embedded value type:\n", "spans": [[0, 89]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "      \\textbf{Assignment types.}\n", "spans": [[0, 31], [31, 33]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[379, 0, 0, 0, "The"], [379, 0, 4, 4, "assignment"], [379, 0, 15, 15, "type"], [379, 0, 20, 20, "denotes"], [379, 0, 28, 28, "whether"], [379, 0, 36, 36, "the"], [379, 0, 40, 40, "input"], [379, 0, 46, 46, "tree"], [379, 0, 51, 51, "defines"], [379, 0, 59, 59, "the"], [379, 0, 63, 63, "value"], [379, 0, 70, 70, "such"], [379, 0, 75, 75, "as"], [379, 0, 78, 78, "in"], [379, 0, 97, 97, "or"], [379, 0, 100, 100, "whether"], [379, 0, 108, 108, "the"], [379, 0, 112, 112, "attribute"], [379, 0, 122, 122, "grammar"], [379, 0, 130, 130, "defines"], [379, 0, 138, 138, "it"], [379, 0, 142, 142, "as"], [379, 0, 145, 145, "in"]], "s": " The assignment type denotes whether the input tree defines the value \b, such as in               , or whether the attribute grammar defines it, as in  \b.\r\nNo complete linkages found.\r\nFound 9 linkages (9 had no P.P. violations) at null count 7\r\n\tLinkage 1, cost vector = (UNUSED=7 DIS=3 AND=0 LEN=66)\r\n\r\n    +----------------------------------------------------------------------\r\n    |                                                                      \r\n    +--------------------------------Wd--------------------------------+   \r\n    |      +-----------------------------Ds----------------------------+   \r\n    |      |        +----AN---+---------------AN---------------+---AN--+---\r\n    |      |        |         |                                |       |   \r\nLEFT-WALL the assignment.n type.n [denotes] [whether] [the] input.n tree.n \r\n\r\n\r\n-----------------Xp---------------------------------------------------\r\n                                 +-----------------------------Xc-----\r\n    +-------------MVs------------+-------------------Cs---------------\r\n    +-----Os-----+               |                     +--------D*u---\r\nSs--+      +-D*u-+    +----Xd----+                     |       +----AN\r\n    |      |     |    |          |                     |       |      \r\ndefines.v the value.n , [such] as.p [in] , or whether the attribute.n \r\n\r\n\r\n-----------------------------------+\r\n-----------------------+           |\r\n----+                  |           |\r\n----+                  |           |\r\n----+----Ss---+--Ox--+ |           |\r\n    |         |      | |           |\r\ngrammar.n defines.v it , [as] [in] . \r\n\r\n\r\n    +----------------------------------------------------------------------\r\n    |                                                                      \r\n    +--------------------------------Wd--------------------------------+   \r\n    |      +-----------------------------Ds----------------------------+   \r\n    |      |        +----AN---+---------------AN---------------+---AN--+---\r\n    |      |        |         |                                |       |   \r\nLEFT-WALL the assignment.n type.n [denotes] [whether] [the] input.n tree.n \r\n\r\n\r\n-----------------Xp---------------------------------------------------\r\n                                                 +--------------------\r\n    +---------------------MVs--------------------+-----------Cs-------\r\n    +-----Os-----+                               |     +--------D*u---\r\nSs--+      +-D*u-+    +------------Xd------------+     |       +----AN\r\n    |      |     |    |                          |     |       |      \r\ndefines.v the value.n , [such] as.p [in] , or whether the attribute.n \r\n\r\n\r\n-----------------------------------+\r\n-Xc--------------------+           |\r\n----+                  |           |\r\n----+                  |           |\r\n----+----Ss---+--Ox--+ |           |\r\n    |         |      | |           |\r\ngrammar.n defines.v it , [as] [in] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "The assignment type denotes whether the input tree defines the value, such as in               , or whether the attribute grammar defines it, as in             . Assignments to an input type are illegal, and multiple assignments to a variable type are also illegal. \n", "spans": [[0, 161], [162, 267]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "If an input tree fails to provide an input attribute, a runtime error will be thrown. To still provide an interpretation of such trees, input attributes  support the annotation ''?'',  which enables pattern matching through functions                                 and                           .  Alternatively, for the common scenario of using a fixed default value, a default value can instead be defined as in                          . If the input tree does not provide the value, the default value will be automatically substituted.\n", "spans": [[0, 85], [86, 180], [180, 297], [299, 441], [442, 541]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[383, 0, 0, 0, "Canonical"], [383, 0, 10, 10, "attribute"], [383, 0, 20, 20, "grammars"], [383, 0, 29, 29, "can"], [383, 0, 33, 33, "encode"], [383, 0, 40, 40, "input"], [383, 0, 46, 46, "attributes"], [383, 0, 57, 57, "in"], [383, 0, 60, 60, "two"], [383, 0, 64, 64, "ways"], [383, 0, 70, 70, "First"], [383, 0, 77, 77, "semantic"], [383, 0, 86, 86, "functions"], [383, 0, 96, 96, "with"], [383, 0, 101, 101, "no"], [383, 0, 104, 104, "parameters"], [383, 0, 115, 115, "encode"], [383, 0, 122, 122, "the"], [383, 0, 126, 126, "lack"], [383, 0, 131, 131, "of"], [383, 0, 134, 134, "dependencies"]], "s": " Canonical attribute grammars can encode input attributes in two ways \b First, semantic functions with no parameters encode the lack of dependencies.\r\nNo complete linkages found.\r\nFound 330 linkages (330 had no P.P. violations) at null count 1\r\n\tLinkage 1, cost vector = (UNUSED=1 DIS=3 AND=0 LEN=38)\r\n\r\n    +---------------------------------------------------------------\r\n    |                                                  +------------\r\n    +----------------Wd----------------+               +--------Op--\r\n    |          +-----A-----+-----AN----+---Sp--+---I---+       +----\r\n    |          |           |           |       |       |       |    \r\nLEFT-WALL canonical.a attribute.n grammars.n can.v encode.v input.n \r\n\r\n\r\n-------------------------------Xp------------------------------------------\r\nMVp-----------+        +--------------Ce-------------+------------------Sp-\r\n------+       +---Jp---+     +-----------AN----------+        +--------Jp--\r\nAN----+       |  +-Dmc-+     |            +-----A----+---Mp---+      +----D\r\n      |       |  |     |     |            |          |        |      |     \r\nattributes.n in two ways.n First [,] semantic.a functions.n with no.misc-d \r\n\r\n\r\n---------------------------------------------------+\r\n-----------------+                                 |\r\n------+          +-----Os----+                     |\r\nmc----+          |     +-D*u-+-Mp-+---Jp---+       |\r\n      |          |     |     |    |        |       |\r\nparameters.n encode.v the lack.n of dependencies.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "Canonical attribute grammars can encode input attributes in two ways. First, semantic functions with no parameters encode the lack of dependencies. Second, for finite domains, the set of tree grammar productions can expand to include attribute nodes. The second encoding more faithfully describes our approach because, like our system, it feeds into an automatic tree parser generator. For each tree node, our generated parser scans for the expected set of input attributes.\n", "spans": [[0, 69], [70, 147], [148, 250], [251, 385], [386, 475]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "      \\textbf{Value types.} \n", "spans": [[0, 26], [26, 29]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [386, 0, 51, 51, "embeddings"], "s": ["embedding", "embed dings", "embed-dings"], "e": "spell"}, {"i": [386, 0, 243, 243, "OpenGL's"], "s": [], "e": "spell"}], "paragraph": "The system also supports type annotations used for embeddings. Generated code typically compiles as part of a project in a more static language, such as C++, which require a static type discipline. The annotations can be user-defined, such as OpenGL's \\emph{vertex buffer object}           , which is not defined within our system.\n", "spans": [[0, 62], [63, 197], [198, 332]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[388, 0, 0, 0, "Our"], [388, 0, 4, 4, "analyzer"], [388, 0, 13, 13, "ignores"], [388, 0, 21, 21, "the"], [388, 0, 25, 25, "value"], [388, 0, 31, 31, "type"], [388, 0, 36, 36, "annotations"], [388, 0, 48, 48, "such"], [388, 0, 53, 53, "as"], [388, 0, 73, 73, "and"], [388, 0, 92, 92, "while"], [388, 0, 98, 98, "the"], [388, 0, 102, 102, "low-level"], [388, 0, 112, 112, "code"], [388, 0, 117, 117, "generator"], [388, 0, 127, 127, "passes"], [388, 0, 134, 134, "along"], [388, 0, 140, 140, "the"], [388, 0, 144, 144, "decorations"], [388, 0, 169, 169, "and"]], "s": " Our analyzer ignores the value type annotations such as              \b     and                while the low-level code generator passes along the deco \brations              and .\r\nNo complete linkages found.\r\nFound 54 linkages (30 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=1 AND=0 LEN=39)\r\n\r\n    +-------------------------------------------------------------------------\r\n    |                           +----------------------MVs--------------------\r\n    |                           +--------------Op--------------+              \r\n    +-------Wd------+           |      +----------Dmc----------+              \r\n    |      +---D*u--+-----Ss----+      |     +---AN--+----AN---+              \r\n    |      |        |           |      |     |       |         |              \r\nLEFT-WALL our analyzer[?].n ignores.v the value.n type.n annotations.n [such] \r\n\r\n\r\n---------Xp-------------------------------------------------------------\r\n--+                                                                     \r\n  +---------------------Cs--------------------+                         \r\n  |             +--------------Ds-------------+                 +------J\r\n  |             |         +----Ah----+---AN---+----Ss----+--MVp-+    +--\r\n  |             |         |          |        |          |      |    |  \r\nas.p and while the low-level[!].a code.n generator.n passes.v along the \r\n\r\n\r\n--------------------+\r\n                    |\r\n                    |\r\np-----+             |\r\n-Dmc--+             |\r\n      |             |\r\ndecorations.n [and] . \r\n\r\n\r\n    +-------------------------------------------------------------------------\r\n    |                           +---------------------------MVs---------------\r\n    |                           +--------------Op--------------+              \r\n    +-------Wd------+           |      +----------Dmc----------+              \r\n    |      +---D*u--+-----Ss----+      |     +---AN--+----AN---+              \r\n    |      |        |           |      |     |       |         |              \r\nLEFT-WALL our analyzer[?].n ignores.v the value.n type.n annotations.n [such] \r\n\r\n\r\n---------Xp-------------------------------------------------------------\r\n-----------+                                                            \r\n           +----------------Cs----------------+                         \r\n           |    +--------------Ds-------------+                 +------J\r\n           |    |         +----Ah----+---AN---+----Ss----+--MVp-+    +--\r\n           |    |         |          |        |          |      |    |  \r\nas.p and while the low-level[!].a code.n generator.n passes.v along the \r\n\r\n\r\n--------------------+\r\n                    |\r\n                    |\r\np-----+             |\r\n-Dmc--+             |\r\n      |             |\r\ndecorations.n [and] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "Our analyzer ignores the value type annotations such as                  and                while the low-level code generator passes along the decorations              and           .  The embedded design simplifies implementation because value type checking is performed by the host language's compiler. \n", "spans": [[0, 184], [186, 307]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [391, 0, 261, 261, "class's"], "s": ["classes", "lass's"], "e": "spell"}, {"i": [391, 0, 347, 347, "var"], "s": ["bar", "car", "ear", "far", "jar", "mar", "oar", "par", "tar", "van", "VAR", "vary", "vat", "Vax", "VCR", "war"], "e": "spell"}], "paragraph": "In practice, we  use attribute definitions in interfaces for information hiding across classes and lightweight specification of relationships between similar classes. An attribute declared inside of a class is \\emph{local} to constraints in the class: only the class's constraints can read or write to the attribute. Conversely, declaring a \\emph{var} inside of an interface hints that it is meant to be reused by outside classes, such as part of a tree traversal.\n", "spans": [[0, 166], [167, 316], [317, 465]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [401, 0, 69, 69, "HBox"], "s": ["Box"], "e": "spell"}], "paragraph": "\\caption{\\textbf{Trait construct}. Adds shared rendering code to the HBox class.}\n", "spans": [[0, 34], [35, 80], [80, 82]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[405, 0, 12, 12, "Traits"], [405, 0, 20, 20, "Reusing"], [405, 0, 28, 28, "Cross-cutting"]], "s": " Traits: Reusing Cross-cutting .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 6\r\n\tUnique linkage, cost vector = (UNUSED=7 DIS=0 AND=0 LEN=0)\r\n\r\n[Traits] [:] [reusing] [Cross-cutting] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\subsection{Traits: Reusing Cross-cutting Code}\n", "spans": [[0, 48]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "As with many object systems, we support a trait construct for cross-cutting code that should be shared across classes. It statically expands like a macro, and therefore provides no formal expressive power. For example, Figure~\\ref{fig:trait} defines how to render a rectangle given several attributes, and then adds that functionality to class            . If the language was extended with class            , the class definition of             could also use trait                 .\n", "spans": [[0, 118], [119, 205], [206, 356], [357, 485]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[435, 0, 17, 17, "Input"], [435, 0, 23, 23, "tree"], [435, 0, 28, 28, "as"], [435, 0, 31, 31, "graph"], [435, 0, 37, 37, "with"], [435, 0, 42, 42, "labeled"], [435, 0, 50, 50, "nodes"]], "s": " Input tree as graph with labeled nodes .\r\nNo complete linkages found.\r\nFound 2 linkages (2 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=2 AND=0 LEN=15)\r\n\r\n    +----------------------------Xp----------------------------+\r\n    |        +---------------------Op---------------------+    |\r\n    |        |                   +-----------AN-----------+    |\r\n    +---Wi---+       +-----AN----+               +----A---+    |\r\n    |        |       |           |               |        |    |\r\nLEFT-WALL input.v tree.n [as] graph.n [with] labeled.v nodes.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}, {"i": [[435, 0, 17, 17, "Input"], [435, 0, 23, 23, "tree"], [435, 0, 28, 28, "as"], [435, 0, 31, 31, "graph"], [435, 0, 37, 37, "with"], [435, 0, 42, 42, "labeled"], [435, 0, 50, 50, "nodes"], [435, 0, 56, 56, "and"], [435, 0, 60, 60, "edges"], [435, 0, 68, 68, "Specified"], [435, 0, 78, 78, "in"], [435, 0, 81, 81, "the"]], "s": " Input tree as graph with labeled nodes and edges Specified in the .\r\nNo complete linkages found.\r\nFound 12 linkages (12 had no P.P. violations) at null count 4\r\n\tLinkage 1, cost vector = (UNUSED=4 DIS=2 AND=0 LEN=23)\r\n\r\n    +--------------------------------------------Xp------------------------\r\n    |        +---------------------------Ss---------------------------+    \r\n    |        |                          +-------Jp------+             +----\r\n    +---Wd---+------Mp-----+-----Mp-----+      +----A---+             +---O\r\n    |        |             |            |      |        |             |    \r\nLEFT-WALL input.n [tree] as.p [graph] with labeled.v nodes.n [and] edges.v \r\n\r\n\r\n-------------------+\r\n                   |\r\n---K-------+       |\r\ns---+      |       |\r\n    |      |       |\r\nSpecified in [the] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "\\caption{\\textbf{Input tree as graph with labeled nodes and edges}. Specified in the JSON notation.}\n", "spans": [[0, 67], [68, 99], [99, 101]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "\\subsection{Loops}\n", "spans": [[0, 19]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[441, 0, 0, 0, "We"], [441, 0, 3, 3, "extend"], [441, 0, 10, 10, "our"], [441, 0, 14, 14, "language"], [441, 0, 23, 23, "with"], [441, 0, 28, 28, "declarative"], [441, 0, 40, 40, "loops"], [441, 0, 46, 46, "over"], [441, 0, 51, 51, "the"], [441, 0, 55, 55, "attributes"], [441, 0, 66, 66, "of"], [441, 0, 69, 69, "multiple"], [441, 0, 78, 78, "nodes"]], "s": " We extend our language with declarative loops over the attributes of \b multiple nodes.\r\nNo complete linkages found.\r\nFound 10 linkages (4 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=0 AND=0 LEN=18)\r\n\r\n    +----------------------------------------------------Xp----------------\r\n    |            +------Os-----+                                    +-----J\r\n    +--Wd--+--Sp-+     +--D*u--+--------Ma--------+-------MVp-------+   +--\r\n    |      |     |     |       |                  |                 |   |  \r\nLEFT-WALL we extend.v our language.n [with] declarative.a [loops] over the \r\n\r\n\r\n-----------------------------------+\r\np-----+       +-------Jp------+    |\r\n-Dmc--+---Mp--+      +----A---+    |\r\n      |       |      |        |    |\r\nattributes.n of multiple.a nodes.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}, {"i": [[441, 0, 0, 0, "We"], [441, 0, 3, 3, "extend"], [441, 0, 10, 10, "our"], [441, 0, 14, 14, "language"], [441, 0, 23, 23, "with"], [441, 0, 28, 28, "declarative"], [441, 0, 40, 40, "loops"], [441, 0, 46, 46, "over"], [441, 0, 51, 51, "the"], [441, 0, 55, 55, "attributes"], [441, 0, 66, 66, "of"], [441, 0, 69, 69, "multiple"], [441, 0, 78, 78, "nodes"], [441, 0, 85, 85, "They"], [441, 0, 90, 90, "are"], [441, 0, 94, 94, "an"], [441, 0, 97, 97, "expressive"], [441, 0, 108, 108, "extension"], [441, 0, 118, 118, "over"], [441, 0, 123, 123, "the"], [441, 0, 127, 127, "uniform"], [441, 0, 135, 135, "recurrence"], [441, 0, 146, 146, "relations"], [441, 0, 156, 156, "of"], [441, 0, 161, 161, "CITE"]], "s": " We extend our language with declarative loops over the attributes of \b multiple nodes They are an expressive extension over the uniform recurrence rel \bations of [[CITE].\r\nNo complete linkages found.\r\nFound 968 linkages (224 had no P.P. violations) at null count 6\r\n\tLinkage 1, cost vector = (UNUSED=6 DIS=4 AND=0 LEN=49)\r\n\r\n    +----------------------------------------------------------------------\r\n    |                                                                      \r\n    |            +------Os-----+                                    +-----J\r\n    +--Wd--+--Sp-+     +--D*u--+--------Ma--------+-------MVp-------+   +--\r\n    |      |     |     |       |                  |                 |   |  \r\nLEFT-WALL we extend.v our language.n [with] declarative.a [loops] over the \r\n\r\n\r\n---------------------------------Xp-----------------------------------------\r\n      +------------------------Ma------------------------+                  \r\np-----+       +-------Jp------+----Bp*t---+              |                  \r\n-Dmc--+---Mp--+      +----A---+--Rn--+-Ss-+              +---------MVp------\r\n      |       |      |        |      |    |              |                  \r\nattributes.n of multiple.a nodes.n They are.v [an] expressive.a [extension] \r\n\r\n\r\n--------------------------------------------------------------+\r\n  +----------------Jp----------------+                        |\r\n  |   +--------------Dmc-------------+--------MXp--------+    |\r\n--+   |      +-----A-----+-----AN----+               +-Xd+Xc+ |\r\n  |   |      |           |           |               |   |  | |\r\nover the uniform.a recurrence.n relations.n [of] [[] [ CITE ] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "We extend our language with declarative loops over the attributes of multiple nodes. They are an expressive extension over the uniform recurrence relations of [[CITE]].\n", "spans": [[0, 84], [85, 169]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[443, 0, 0, 0, "The"], [443, 0, 4, 4, "loop"], [443, 0, 9, 9, "construct"], [443, 0, 33, 33, "specifies"], [443, 0, 43, 43, "a"], [443, 0, 45, 45, "block"], [443, 0, 51, 51, "of"], [443, 0, 54, 54, "loop"], [443, 0, 59, 59, "body"], [443, 0, 64, 64, "statements"]], "s": " The loop construct,            , specifies a block of loop body stat \bements.\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 4\r\n\tUnique linkage, cost vector = (UNUSED=4 DIS=2 AND=0 LEN=20)\r\n\r\n    +-------------------------------------------Xp-----------------------\r\n    +----------Wd---------+                   +-----Os----+     +--------\r\n    |      +------Ds------+---------Ss--------+      +-Ds-+--Mp-+        \r\n    |      |              |                   |      |    |     |        \r\nLEFT-WALL the [loop] construct.n [,] [,] specifies.v a block.n of [loop] \r\n\r\n\r\n--------------------+\r\n--Jp---------+      |\r\n   +----AN---+      |\r\n   |         |      |\r\nbody.n statements.n . \r\n\r\n", "e": "gram"}, {"i": [[443, 0, 0, 0, "The"], [443, 0, 4, 4, "loop"], [443, 0, 9, 9, "construct"], [443, 0, 33, 33, "specifies"], [443, 0, 43, 43, "a"], [443, 0, 45, 45, "block"], [443, 0, 51, 51, "of"], [443, 0, 54, 54, "loop"], [443, 0, 59, 59, "body"], [443, 0, 64, 64, "statements"], [443, 0, 76, 76, "It"], [443, 0, 79, 79, "acts"], [443, 0, 84, 84, "over"], [443, 0, 89, 89, "a"], [443, 0, 91, 91, "sequence"], [443, 0, 100, 100, "of"], [443, 0, 103, 103, "nodes"], [443, 0, 109, 109, "declared"], [443, 0, 118, 118, "with"], [443, 0, 123, 123, "the"], [443, 0, 127, 127, "same"], [443, 0, 132, 132, "interface"], [443, 0, 143, 143, "such"], [443, 0, 148, 148, "as"], [443, 0, 176, 176, "in"], [443, 0, 179, 179, "Figure"], [443, 0, 191, 191, "fig"], [443, 0, 195, 195, "loops"]], "s": " The loop construct,            , specifies a block of loop body stat \bements It acts over a sequence of nodes declared with the same interface, such a \bs                          in Figure~\\ref{fig:loops.\r\nNo complete linkages found.\r\nFound 604 linkages (576 had no P.P. violations) at null count 5\r\n\tLinkage 1, cost vector = (UNUSED=5 DIS=5 AND=0 LEN=30)\r\n\r\n                                    +-----Os----+     +----------Jp---\r\n +------Ds------+---------Ss--------+      +-Ds-+--Mp-+           +---\r\n |              |                   |      |    |     |           |   \r\nthe [loop] construct.n [,] [,] specifies.v a block.n of [loop] body.n \r\n\r\n\r\n      +------------------------Bp------------------------+                   \r\n      |            +------------------Sp-----------------+                   \r\n------+-----Rn-----+     +----Jp---+                     |       +-------Js--\r\n-AN---+       +-AN-+--Mp-+  +--Dsu-+--Mp--+-Jp-+         +--MVp--+   +IDBR+--\r\n      |       |    |     |  |      |      |    |         |       |   |    |  \r\nstatements.n It acts.n over a sequence.n of nodes.n declared.v with the same \r\n\r\n\r\n     +-----MXsx-----+                             \r\n-----+      +---Xd--+-------------Xc-------------+\r\nDs*y-+      |   +IDB+--------J-------+           |\r\n     |      |   |   |                |           |\r\ninterface.n , such as [in] Figure~\\ref{fig:loops . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "The loop construct,            , specifies a block of loop body statements. It acts over a sequence of nodes declared with the same interface, such as                          in Figure~\\ref{fig:loops}. The looping order is restricted to forward iteration, though our approach generalizes to other loop orders.\n", "spans": [[0, 75], [76, 202], [203, 311]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[445, 0, 0, 0, "A"], [445, 0, 2, 2, "statement"], [445, 0, 12, 12, "in"], [445, 0, 15, 15, "a"], [445, 0, 17, 17, "loop"], [445, 0, 22, 22, "body"], [445, 0, 27, 27, "will"], [445, 0, 32, 32, "execute"], [445, 0, 40, 40, "for"], [445, 0, 44, 44, "each"], [445, 0, 49, 49, "element"], [445, 0, 57, 57, "of"], [445, 0, 60, 60, "the"], [445, 0, 64, 64, "list"]], "s": " A statement in a loop body will execute for each element of the list \b.\r\nNo complete linkages found.\r\nFound 4 linkages (4 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=4 AND=0 LEN=25)\r\n\r\n    +--------------------------------------------Xp--------------------\r\n    |            +------------Ss*t------------+                        \r\n    +-----Wd-----+       +------Js-----+      |       +---------Os-----\r\n    |     +--Ds--+---Mp--+ +-----Ds----+      +---I---+             +--\r\n    |     |      |       | |           |      |       |             |  \r\nLEFT-WALL a statement.n in a [loop] body.n will.v execute.v [for] each \r\n\r\n\r\n------------------------+\r\n                        |\r\n----+      +---Js---+   |\r\nDs--+--Mp--+  +--Ds-+   |\r\n    |      |  |     |   |\r\nelement.n of the list.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}, {"i": [[445, 0, 0, 0, "A"], [445, 0, 2, 2, "statement"], [445, 0, 12, 12, "in"], [445, 0, 15, 15, "a"], [445, 0, 17, 17, "loop"], [445, 0, 22, 22, "body"], [445, 0, 27, 27, "will"], [445, 0, 32, 32, "execute"], [445, 0, 40, 40, "for"], [445, 0, 44, 44, "each"], [445, 0, 49, 49, "element"], [445, 0, 57, 57, "of"], [445, 0, 60, 60, "the"], [445, 0, 64, 64, "list"], [445, 0, 70, 70, "For"], [445, 0, 74, 74, "example"], [445, 0, 83, 83, "the"], [445, 0, 87, 87, "following"], [445, 0, 97, 97, "statement"], [445, 0, 107, 107, "assigns"], [445, 0, 115, 115, "the"], [445, 0, 119, 119, "attribute"], [445, 0, 138, 138, "the"], [445, 0, 142, 142, "sum"], [445, 0, 146, 146, "of"], [445, 0, 149, 149, "the"], [445, 0, 153, 153, "children"], [445, 0, 162, 162, "widths"]], "s": " A statement in a loop body will execute for each element of the list \b For example, the following statement assigns the attribute          the sum of  \bthe children widths:.\r\nNo complete linkages found.\r\nFound 24 linkages (24 had no P.P. violations) at null count 3\r\n\tLinkage 1, cost vector = (UNUSED=3 DIS=10 AND=0 LEN=72)\r\n\r\n    +------------------------------------------------------------------\r\n    +---------------------------------------------------Xx-------------\r\n    |                                                                  \r\n    |            +------------Ss*t------------+                        \r\n    +-----Wd-----+       +------Js-----+      |       +---------Os-----\r\n    |     +--Ds--+---Mp--+ +-----Ds----+      +---I---+             +--\r\n    |     |      |       | |           |      |       |             |  \r\nLEFT-WALL a statement.n in a [loop] body.n will.v execute.v [for] each \r\n\r\n\r\n----------------------------------Xp------------------------------------------\r\n--------------------------------------+                                       \r\n           +---------Js---------+     |                                       \r\n           |  +--------Ds-------+     +----------Wd----------+          +-----\r\n----+      |  |     +-----AN----+     |  +---------Ds--------+          +-----\r\nDs--+--Mp--+  |     |    +--AN--+     |  |       +-----AN----+---Ss*t---+     \r\n    |      |  |     |    |      |     |  |       |           |          |     \r\nelement.n of the list.n For example.n , the following.n statement.n assigns.v \r\n\r\n\r\n---------------------------------------------------------+\r\n                                                         |\r\n                                                         |\r\n-------Osn------------+    +---------Jp---------+        |\r\n-Os------+            |    |  +-------Dmc-------+        |\r\n +---Ds--+       +-Ds-+-Mp-+  |       +----AN---+        |\r\n |       |       |    |    |  |       |         |        |\r\nthe attribute.n the sum.n of the children.n widths.n [:] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "A statement in a loop body will execute for each element of the list. For example, the following statement assigns the attribute          the sum of the children widths:\n", "spans": [[0, 69], [70, 170]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [447, 0, 47, 47, "righthand-side"], "s": [], "e": "spell"}], "paragraph": "Similar to array index notation, the suffix on righthand-side variable names for loop statements provide a restricted form of relative indexing for loops. In particular:\n", "spans": [[0, 154], [155, 170]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[449, 0, 8, 8, "i"], [449, 0, 11, 11, "the"], [449, 0, 17, 17, "current''"], [449, 0, 27, 27, "loop"]], "s": " i: the ``current'' loop .\r\nNo complete linkages found.\r\nFound 2 linkages (2 had no P.P. violations) at null count 3\r\n\tLinkage 1, cost vector = (UNUSED=3 DIS=2 AND=0 LEN=9)\r\n\r\n    +--------------------Xp--------------------+\r\n    +----------Wd---------+                    |\r\n    |              +--DD--+---Sp---+           |\r\n    |              |      |        |           |\r\nLEFT-WALL [i] [:] the current.a ''[?].v [loop] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "       $i: the ``current'' loop step\n", "spans": [[0, 37]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[450, 0, 8, 8, "-"], [450, 0, 11, 11, "the"], [450, 0, 15, 15, "previous"], [450, 0, 24, 24, "loop"]], "s": " -: the previous loop .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 4\r\n\tUnique linkage, cost vector = (UNUSED=4 DIS=0 AND=0 LEN=9)\r\n\r\n    +------------------Xp-----------------+\r\n    +----------------Wi---------------+   |\r\n    |                                 |   |\r\nLEFT-WALL [-] [:] [the] [previous] loop.v . \r\n\r\n", "e": "gram"}], "paragraph": "       $-: the previous loop step\n", "spans": [[0, 34]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[451, 0, 12, 12, "the"], [451, 0, 16, 16, "last"]], "s": " the last .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 1\r\n\tUnique linkage, cost vector = (UNUSED=1 DIS=0 AND=0 LEN=3)\r\n\r\n    +--------Xp--------+\r\n    +------Wi------+   |\r\n    |              |   |\r\nLEFT-WALL [the] last.v . \r\n\r\n", "e": "gram"}], "paragraph": "       $ $: the last loop step\n", "spans": [[0, 31]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[453, 0, 0, 0, "Use"], [453, 0, 4, 4, "of"], [453, 0, 7, 7, "suffix"], [453, 0, 18, 18, "-''"], [453, 0, 22, 22, "in"], [453, 0, 25, 25, "a"], [453, 0, 39, 39, "can"], [453, 0, 43, 43, "be"], [453, 0, 46, 46, "thought"], [453, 0, 54, 54, "of"], [453, 0, 57, 57, "as"], [453, 0, 60, 60, "an"], [453, 0, 63, 63, "accumulator"], [453, 0, 75, 75, "in"], [453, 0, 78, 78, "functional"], [453, 0, 89, 89, "programming"]], "s": " Use of suffix `` $-'' in a             can be thought of as an accum \bulator in functional programming.\r\nNo complete linkages found.\r\nFound 162 linkages (88 had no P.P. violations) at null count 4\r\n\tLinkage 1, cost vector = (UNUSED=4 DIS=0 AND=0 LEN=36)\r\n\r\n    +--------------------------------------------------------------Xp------\r\n    |       +--------------------Ss--------------------+                 +-\r\n    |       |    +----------Jp---------+               |     +-----Pv----+ \r\n    +---Wd--+-Mp-+     +-------AN------+               +--Ix-+     +-IDYN+M\r\n    |       |    |     |               |               |     |     |     | \r\nLEFT-WALL use.n of suffix.n [$] [-] ''[?].n [in] [a] can.v be.v thought of \r\n\r\n\r\n-------------------------------------------------------+\r\n-----------MVp------------+                            |\r\n  +------Js-----+         +---------Jp---------+       |\r\nVp+   +----Ds---+         |       +------A-----+       |\r\n  |   |         |         |       |            |       |\r\nas.p an accumulator[!].n in functional.a programming.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "Use of suffix `` $-'' in a             can be thought of as an accumulator in functional programming. \n", "spans": [[0, 103]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[456, 0, 0, 0, "One"], [456, 0, 4, 4, "loop"], [456, 0, 9, 9, "statement"], [456, 0, 19, 19, "can"], [456, 0, 23, 23, "refer"], [456, 0, 29, 29, "to"], [456, 0, 32, 32, "the"], [456, 0, 36, 36, "accumulator"], [456, 0, 48, 48, "of"], [456, 0, 51, 51, "another"], [456, 0, 60, 60, "which"], [456, 0, 66, 66, "fold"], [456, 0, 71, 71, "statements"], [456, 0, 82, 82, "in"], [456, 0, 85, 85, "most"], [456, 0, 90, 90, "languages"], [456, 0, 100, 100, "do"], [456, 0, 103, 103, "not"], [456, 0, 107, 107, "support"]], "s": " One loop statement can refer to the accumulator of another, which fo \bld statements in most languages do not support.\r\nNo complete linkages found.\r\nFound 80 linkages (20 had no P.P. violations) at null count 1\r\n\tLinkage 1, cost vector = (UNUSED=1 DIS=1 AND=0 LEN=25)\r\n\r\n                                       +------Js------+              +--MXsr\r\n +------Ds------+--Ss*t--+---I--+--MVp-+   +----Ds----+----Mp---+-Js-+    +-\r\n |              |        |      |      |   |          |         |    |    | \r\none [loop] statement.n can.v refer.v to.r the accumulator[!].n of another , \r\n\r\n\r\n  +------------------------------Xc------------------------------+\r\n  +---------------------------B*w--------------------------+     |\r\n  |                +------------Sp*t------------+          |     |\r\n--+                |       +-----Jp----+        +----I*d---+     |\r\nXd+      +----AN---+---Mp--+   +--Dmc--+        +-N-+      |     |\r\n  |      |         |       |   |       |        |   |      |     |\r\nwhich fold.n statements.n in most languages.n do.v not support.v . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "One loop statement can refer to the accumulator of another, which fold statements in most languages do not support. For example, two loop counters can be intertwined:\n", "spans": [[0, 115], [116, 167]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "The programmer does not manually order the statements.  For example, our system infers that the imperative code that implements the above declarations is just one imperative loop that fuses them together. The incorrect alternative of implementing the declarations as a different imperative loop for each would lead to unfulfilled data dependencies. \n", "spans": [[0, 54], [56, 204], [205, 350]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [467, 0, 238, 238, "sec"], "s": ["Dec", "sea", "sect", "see", "set", "sew", "sex", "sic", "spec"], "e": "spell"}, {"i": [467, 0, 242, 242, "loopscheduling"], "s": ["loop scheduling", "loop-scheduling"], "e": "spell"}], "paragraph": "We reduced scheduling loops to scheduling canonical attribute grammars. Our insight is that, for a restricted language of relative indices, we can schedule several unrolled loop steps and generalize the schedule to the rest. Section~\\ref{sec:loopscheduling} discusses this in more detail. \n", "spans": [[0, 71], [72, 224], [225, 290]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [469, 0, 126, 126, "underspecification"], "s": ["under specification", "under-specification"], "e": "spell"}, {"i": [469, 0, 229, 229, "sec"], "s": ["Dec", "sea", "sect", "see", "set", "sew", "sex", "sic", "spec"], "e": "spell"}, {"i": [469, 0, 233, 233, "loopscheduling"], "s": ["loop scheduling", "loop-scheduling"], "e": "spell"}], "paragraph": "The declarative nature of the loop construct provides two key benefits. First, coupled with the restricted indexing language, underspecification of the statement order provides freedom for automatic parallelization (Section~\\ref{sec:loopscheduling}). Second, it allows programmers to choose how to structure the program. For example, separating loop statements as above might improve legibility if they are for two different purposes, but as the computation is more intertwined, the programmer has the freedom to choose the following formulation instead:\n", "spans": [[0, 71], [72, 250], [251, 320], [321, 555]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "The formulation brought the two statements together and changed their lexical order. Our language guarantees that such a refactoring does not change the semantic meaning of the code.\n", "spans": [[0, 84], [85, 183]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[479, 0, 12, 12, "Embedded"], [479, 0, 21, 21, "Domain"], [479, 0, 28, 28, "Specific"], [479, 0, 37, 37, "Language"], [479, 0, 47, 47, "Functional"]], "s": " Embedded Domain Specific Language: Functional .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 8\r\n\tUnique linkage, cost vector = (UNUSED=9 DIS=0 AND=0 LEN=0)\r\n\r\n[embedded] [Domain] [Specific] [Language] [:] [Functional] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\subsection{Embedded Domain Specific Language: Functional Rendering}\n", "spans": [[0, 69]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [480, 0, 359, 359, "JavaScript"], "s": ["Java Script", "Java-Script"], "e": "spell"}, {"i": [480, 0, 373, 373, "OpenCL"], "s": [], "e": "spell"}], "paragraph": "We designed our system for interaction with other tools and languages. A key ability is to invoke externally-defined functions, such as               of Figure~\\ref{fig:loops} for the maximum of two numbers and                    of Figure~\\ref{fig:trait} to draw a rectangle to the screen. Attribute grammars are compiled to run in some host system, such as JavaScript or OpenCL, and any function in scope to the generated code may be called.\n", "spans": [[0, 70], [71, 290], [291, 444]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "Functions can be safely embedded as long as they provide a \\emph{pure} interface. In particular, the returned output should only depend on the inputs. Likewise, functions should be reentrant for use in automatic parallelization In the case of embedding in statically checked languages, the host's static checker is responsible for checking usage.\n", "spans": [[0, 81], [82, 150], [151, 347]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [507, 0, 31, 31, "screenshots"], "s": ["screen shots", "screen-shots"], "e": "spell"}], "paragraph": "\\caption{\\textbf{Visualization screenshots.} All except [[CITE]] are interactive or animated. Each one was declaratively specified with our extended form of attribute grammars and automatically parallelized. Labels describe whether GPU or multicore code generation was used.}\n", "spans": [[0, 43], [43, 93], [94, 207], [208, 274], [274, 276]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[520, 0, 17, 17, "Document"], [520, 0, 26, 26, "layout"]], "s": " Document layout .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 4\r\n\tUnique linkage, cost vector = (UNUSED=5 DIS=0 AND=0 LEN=0)\r\n\r\n[Document] [layout] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\caption{\\textbf{Document layout screenshots.}}\n", "spans": [[0, 45], [45, 48]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[527, 0, 9, 9, "Evaluation"], [527, 0, 21, 21, "Mechanized"], [527, 0, 32, 32, "Layout"], [527, 0, 39, 39, "Features"]], "s": " Evaluation: Mechanized Layout Features.\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 1\r\n\tUnique linkage, cost vector = (UNUSED=1 DIS=0 AND=0 LEN=7)\r\n\r\n    +------------------------Xp-----------------------+\r\n    |                          +--------Os-------+    |\r\n    +----Wd----+-------Ss------+         +---G---+    |\r\n    |          |               |         |       |    |\r\nLEFT-WALL Evaluation [:] mechanized.v Layout Features . \r\n\r\n", "e": "gram"}], "paragraph": "\\section{Evaluation: Mechanized Layout Features}\n", "spans": [[0, 49]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "We specified many common layout language features with our extended form of attribute grammars. Most examples were written with few, if any, modifications to the generated code. This experience shows that our restricted form of attribute grammars are a viable formalism for layout specification. The following subsections present highlights from our case studies in specifying layouts with attribute grammars, and the appendix contains the full code.\n", "spans": [[0, 95], [96, 177], [178, 295], [296, 451]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "\\subsection{Rendering}\n", "spans": [[0, 23]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "We found several rendering patterns to be important for many visualizations. A library of functional graphics primitives, such as                  in Figure~\\ref{fig:trait}, sufficiently augmented our attribute grammar language in order to achieve them.\n", "spans": [[0, 76], [77, 254]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[535, 0, 14, 14, "2D"], [535, 0, 17, 17, "and"], [535, 0, 21, 21, "3D"], [535, 0, 26, 26, "Our"], [535, 0, 30, 30, "base"], [535, 0, 35, 35, "primitives"], [535, 0, 46, 46, "are"], [535, 0, 50, 50, "3D"], [535, 0, 54, 54, "and"], [535, 0, 58, 58, "we"], [535, 0, 61, 61, "provide"], [535, 0, 69, 69, "2D"], [535, 0, 72, 72, "primitives"], [535, 0, 83, 83, "that"], [535, 0, 88, 88, "reduce"]], "s": " 2D and 3D Our base primitives are 3D, and we provide 2D primitives t \bhat reduce .\r\nNo complete linkages found.\r\nFound 54 linkages (54 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=0 AND=6 LEN=43)\r\n\r\n    +--------------------------------------------------------Xp-----------\r\n    +--------------------Wd-------------------+                           \r\n    |              +-------AN-------+         |                           \r\n    |              +-NItu-+         |         |        +--Opt-+           \r\n    |     +ND+-NIfu+   +ND+   +--AN-+----AN---+---Spx--+   +ND+           \r\n    |     |  |     |   |  |   |     |         |        |   |  |           \r\nLEFT-WALL 2 D.u and.ru 3 D.u Our base.n primitives.n are.v 3 D.u , and we \r\n\r\n\r\n---------------------------------------------+\r\n                                             |\r\n                                             |\r\n                                             |\r\n                                             |\r\n                                             |\r\nprovide.v 2 D.u primitives.n [that] [reduce] . \r\n\r\n\r\n    +--------------------------------------------------------Xp-----------\r\n    |                                                                     \r\n    +---------------------------------Wd--------------------------------+-\r\n    |                                                                   | \r\nLEFT-WALL 2 D.u and.ru 3 D.u Our base.n primitives.n are.v 3 D.u , and we \r\n\r\n\r\n---------------------------------------------+\r\n    +--------Op-------+                      |\r\n-Sp-+     +ND+---AN---+                      |\r\n    |     |  |        |                      |\r\nprovide.v 2 D.u primitives.n [that] [reduce] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "      \\textbf{2D and 3D.} Our base primitives are 3D, and we provide 2D primitives that reduce into them. \n", "spans": [[0, 24], [24, 107]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [536, 0, 65, 65, "RGBA"], "s": [], "e": "spell"}], "paragraph": "      \\textbf{Color.} Our functional graphics primitives take an RGBA value as input, which enables controlling hue, luminosity, and opacity.\n", "spans": [[0, 20], [20, 142]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [537, 0, 37, 37, "renderable"], "s": ["render able", "render-able"], "e": "spell"}], "paragraph": "      \\textbf{Linked view}. Multiple renderable objects can be associated with one node, which we can use for providing different views of the same data. Such functionality is common for statistical analysis software:\n", "spans": [[0, 27], [28, 153], [154, 218]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[543, 0, 14, 14, "Zooming"], [543, 0, 24, 24, "We"], [543, 0, 27, 27, "can"], [543, 0, 31, 31, "use"], [543, 0, 35, 35, "the"], [543, 0, 39, 39, "same"], [543, 0, 44, 44, "multiple"], [543, 0, 53, 53, "representation"], [543, 0, 68, 68, "capability"], [543, 0, 79, 79, "for"], [543, 0, 83, 83, "a"], [543, 0, 85, 85, "live"], [543, 0, 90, 90, "zoomed"], [543, 0, 97, 97, "out"], [543, 0, 101, 101, "view"], [543, 0, 106, 106, "("], [543, 0, 109, 109, "picture-in-picture'')"]], "s": " Zooming We can use the same multiple representation capability for a \b live zoomed out view (``picture-in-picture''):.\r\nNo complete linkages found.\r\nFound 216 linkages (144 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=2 AND=0 LEN=44)\r\n\r\n    +-------------------------------------------------------------------\r\n    |                          +--------------------------MVp-----------\r\n    |                          +----------------------Os----------------\r\n    +-------Wd-------+         |         +----------------D*uy----------\r\n    |         +---A--+-Ss+--I--+    +IDBR+       +------AN-----+------AN\r\n    |         |      |   |     |    |    |       |             |        \r\nLEFT-WALL zooming.v We can.v use.v the same multiple.n representation.n \r\n\r\n\r\n-----------Xp---------------------------------------------------------------\r\n---------------+--------------Jp--------------+                             \r\n------+        |   +------------Dsu-----------+---------------MXs-----------\r\n------+        |   |    +----------A----------+   +-------------Xd----------\r\n------+        |   |    |              +---A--+   |            +-------Ah---\r\n      |        |   |    |              |      |   |            |            \r\ncapability.n for.p a live.a [zoomed] out.a view.n ( picture-in-picture[!].a \r\n\r\n\r\n--------------+\r\n              |\r\n---+          |\r\n---+          |\r\n---+-Xc-+     |\r\n   |    |     |\r\n''[?].n ) [:] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "      \\textbf{Zooming.} We can use the same multiple representation capability for a live zoomed out view (``picture-in-picture''):\n", "spans": [[0, 22], [22, 132]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[551, 0, 14, 14, "Visibility"]], "s": " Visibility .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 3\r\n\tUnique linkage, cost vector = (UNUSED=4 DIS=0 AND=0 LEN=0)\r\n\r\n[Visibility] [.] \r\n\r\n", "e": "gram"}, {"i": [[551, 0, 14, 14, "Visibility"], [551, 0, 25, 25, "toggles"], [551, 0, 35, 35, "Our"], [551, 0, 39, 39, "macros"], [551, 0, 46, 46, "support"], [551, 0, 54, 54, "conditional"], [551, 0, 66, 66, "expressions"], [551, 0, 79, 79, "which"], [551, 0, 85, 85, "enables"], [551, 0, 93, 93, "controlling"], [551, 0, 105, 105, "whether"], [551, 0, 113, 113, "to"], [551, 0, 116, 116, "render"]], "s": " Visibility toggles Our macros support conditional expressions, which \b enables controlling whether to render .\r\nNo complete linkages found.\r\nFound 56 linkages (28 had no P.P. violations) at null count 1\r\n\tLinkage 1, cost vector = (UNUSED=1 DIS=10 AND=0 LEN=29)\r\n\r\n    +------------------------------------------------------------------\r\n    +---------------------------------------Xx-------------------------\r\n    |                    +-------------------------Op------------------\r\n    |                    |                         +------------AN-----\r\n    +----Wd----+----Ss---+      +---AN--+----AN----+           +------A\r\n    |          |         |      |       |          |           |       \r\nLEFT-WALL Visibility toggles.v Our macros[?].n support.n conditional.a \r\n\r\n\r\n-Xp-------------------------------------------------------------------+\r\n--------------+                                                       |\r\n------+       |                                                       |\r\n------+       |                       +------------Bs------------+    |\r\n------+       +-Ws+--Ss*w-+-----Os----+---------R---------+---I--+    |\r\n      |       |   |       |           |                   |      |    |\r\nexpressions.n , which enables.v controlling.g [whether] to.r render.v . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "      \\textbf{Visibility toggles.} Our macros support conditional expressions, which enables controlling whether to render an object. For example, a boolean input attribute can control whether to show a circle:                                             \n", "spans": [[0, 33], [33, 133], [134, 256]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[552, 0, 14, 14, "Alternative"], [552, 0, 26, 26, "representations"]], "s": " Alternative representations.\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 4\r\n\tUnique linkage, cost vector = (UNUSED=5 DIS=0 AND=0 LEN=0)\r\n\r\n[Alternative] [representations] [.] \r\n\r\n", "e": "gram"}], "paragraph": "      \\textbf{Alternative representations.} Conditional expressions also enable choosing between multiple representations, not just on/off visibility:\n", "spans": [[0, 42], [42, 151]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [563, 0, 27, 27, "Sunburst"], "s": ["Sunburnt", "Sun burst", "Sun-burst"], "e": "spell"}], "paragraph": "\\subsection{Non-Euclidean: Sunburst Diagram}\n", "spans": [[0, 45]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [564, 0, 85, 85, "Sunburst"], "s": ["Sunburnt", "Sun burst", "Sun-burst"], "e": "spell"}], "paragraph": "Visualizations often require non-Euclidean layouts, such as the polar layout for the Sunburst diagram. Instead of propagating and computing over Euclidean values such as x and y coordinates as in       , the visualization can use some other.\n", "spans": [[0, 102], [103, 242]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [566, 0, 18, 18, "sunburst"], "s": ["sunburnt", "sun burst", "sun-burst"], "e": "spell"}, {"i": [566, 0, 63, 63, "sunburst"], "s": ["sunburnt", "sun burst", "sun-burst"], "e": "spell"}], "paragraph": "For example, in a sunburst diagram (Figure~\\ref{fig:renderings:sunburst}), a node should be rendered  far from the center of the chart if its level is high. In our implementation, each node transitively computes its  radius as a function of its parent's. Likewise, the center of visualization propagates from parent to child, with the root node representing the center:\n", "spans": [[0, 156], [157, 254], [255, 370]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "The full example is available in Appendix~\\ref{???}.\n", "spans": [[0, 50], [50, 53]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[583, 0, 12, 12, "Charting"], [583, 0, 22, 22, "Line"], [583, 0, 27, 27, "Graphs"], [583, 0, 34, 34, "and"], [583, 0, 38, 38, "Scatter"]], "s": " Charting: Line Graphs and Scatter .\r\nNo complete linkages found.\r\nFound 2 linkages (2 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=0 AND=0 LEN=9)\r\n\r\n    +----------------------Xp----------------------+\r\n    +-----------Wi----------+---O--+               |\r\n    |                       |      |               |\r\nLEFT-WALL [charting] [:] line.v Graphs and Scatter . \r\n\r\n\r\n    +----------------------Xp----------------------+\r\n    +-----------Wi----------+--------Os-------+    |\r\n    |                       |                 |    |\r\nLEFT-WALL [charting] [:] line.v Graphs and Scatter . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "\\subsection{Charting: Line Graphs and Scatter Plots}\n", "spans": [[0, 53]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [584, 0, 102, 102, "parlab2"], "s": ["parlay", "par lab", "par-lab"], "e": "spell"}], "paragraph": "We specified several types of charts with attribute grammars. For example, Figure~\\ref{fig:renderings:parlab2} depicts an X/Y scatter plot and Figure~\\ref{fig:renderings:line} depicts a line graph. We represent every data point as a leaf node in the tree. Tree traversals will compute details such as the X and Y ranges of a data set, which facilitates features such as normalization and centering.\n", "spans": [[0, 61], [62, 197], [198, 255], [256, 399]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [586, 0, 235, 235, "ge"], "s": ["age", "be", "gb", "gee", "gel", "gem", "get", "GM", "go", "he", "me", "re", "we"], "e": "spell"}], "paragraph": "Time series charts led to two additional encoding tricks. First, multiple time series data should often be represented at the same time, such as for a server farm, the output of each server as the days pass. Figure~\\ref{fig:renderings:ge} depicts one such multiple time series chart. Our approach was to represent each line as an intermediate node:\n", "spans": [[0, 57], [58, 207], [208, 283], [284, 349]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [600, 0, 41, 41, "sec"], "s": ["Dec", "sea", "sect", "see", "set", "sew", "sex", "sic", "spec"], "e": "spell"}], "paragraph": "Second, we found the above (Section~\\ref{sec:rendering}) rendering features such as zooming, panning, and 3D representations to be important for visualizing big time series data.\n", "spans": [[0, 179]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[602, 0, 12, 12, "Animation"], [602, 0, 22, 22, "and"], [602, 0, 26, 26, "Interaction"]], "s": " Animation and Interaction:.\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 6\r\n\tUnique linkage, cost vector = (UNUSED=7 DIS=0 AND=0 LEN=0)\r\n\r\n[Animation] [and] [Interaction] [:] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\subsection{Animation and Interaction: Treemap}\n", "spans": [[0, 48]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [603, 0, 93, 93, "fisheye"], "s": ["fish eye", "fish-eye"], "e": "spell"}], "paragraph": "We declaratively encoded various animation effects with attribute grammars. For example, the fisheye effect enlarges the size of an element the closer the mouse draws near to it. Our core pattern is to encode time varying values as such the mouse position as input attributes and rerun the layout solver when the inputs change.\n", "spans": [[0, 75], [76, 178], [179, 328]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [605, 0, 81, 81, "treemap"], "s": ["tree map", "tree-map"], "e": "spell"}, {"i": [605, 0, 125, 125, "treemap"], "s": ["tree map", "tree-map"], "e": "spell"}, {"i": [605, 0, 318, 318, "treemap"], "s": ["tree map", "tree-map"], "e": "spell"}], "paragraph": "Beyond human interaction, we also support reaction to time. For example, for the treemap shown in Figure~\\ref{fig:renderings:treemap}, users may change the data set shown. Instead of immediately showing the new data set, we introduce a              attribute that an animation increments over time from 0 up to 1. The treemap interpolates the layout position based on the time, which yields a smooth transition for each data point:\n", "spans": [[0, 59], [60, 171], [172, 313], [314, 432]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [619, 0, 24, 24, "treemap"], "s": ["tree map", "tree-map"], "e": "spell"}], "paragraph": "Visualizations like the treemap require recompilation of most of the attributes for such animations, which can become a bottleneck and thus benefits from acceleration by our tool.\n", "spans": [[0, 180]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "\\subsection{Grid-based: Tables}\n", "spans": [[0, 32]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[622, 0, 0, 0, "We"], [622, 0, 3, 3, "now"], [622, 0, 7, 7, "examine"], [622, 0, 15, 15, "one"], [622, 0, 19, 19, "of"], [622, 0, 22, 22, "our"], [622, 0, 26, 26, "most"], [622, 0, 31, 31, "difficult"], [622, 0, 41, 41, "case"], [622, 0, 46, 46, "studies"], [622, 0, 55, 55, "HTML"], [622, 0, 62, 62, "CITE"], [622, 0, 69, 69, "and"], [622, 0, 73, 73, "CSS"], [622, 0, 77, 77, "table"], [622, 0, 83, 83, "layout"], [622, 0, 92, 92, "CITE"]], "s": " We now examine one of our most difficult case studies: HTML~[[CITE]] \b and CSS table layout~[[CITE].\r\nNo complete linkages found.\r\nFound 6 linkages (6 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=0 AND=1 LEN=45)\r\n\r\n    +---------------------------------------------------------------Xp------\r\n    +----------------------------------Xx---------------------------------+ \r\n    |                             +----------------Jp---------------+     +-\r\n    |      +-----Sp----+          |  +--------------Dmc-------------+     | \r\n    +--Wd--+   +---E---+--Os--+-Mp+  |    +---EA--+----A----+---AN--+     | \r\n    |      |   |       |      |   |  |    |       |         |       |     | \r\nLEFT-WALL we now.r examine.v one of our most difficult.a case.n studies.n : \r\n\r\n\r\n---------------------------------------------------------+\r\n                                                         |\r\n-------------Wi--------------+                           |\r\n     +----------COa----------+                           |\r\n     +--Xc--+                +------Os-----+             |\r\n     |      |                |             |             |\r\nHTML~[[CITE ] []] and CSS table.v layout~[[CITE[?].n []] . \r\n\r\n\r\n    +---------------------------------------------------------------Xp------\r\n    +----------------------------------Xx---------------------------------+ \r\n    |                             +----------------Jp---------------+     | \r\n    |      +-----Sp----+          |  +--------------Dmc-------------+     +-\r\n    +--Wd--+   +---E---+--Os--+-Mp+  |    +---EA--+----A----+---AN--+     | \r\n    |      |   |       |      |   |  |    |       |         |       |     | \r\nLEFT-WALL we now.r examine.v one of our most difficult.a case.n studies.n : \r\n\r\n\r\n---------------------------------------------------------+\r\n                                                         |\r\n                                                         |\r\n-------------Wi--------------+                           |\r\n                       +-COa-+------Os-----+             |\r\n                       |     |             |             |\r\nHTML~[[CITE ] []] and CSS table.v layout~[[CITE[?].n []] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "We now examine one of our most difficult case studies: HTML~[[CITE]] and CSS table layout~[[CITE]]. Tables appear in  most rich document layout languages such as CSS and       , and are an instanced of \\emph{grid-based layout}, which is popular for representing layouts such as user interfaces and data tables. In conversations with commercial browser developers, we found that the proposed standards for the layout language features were reverse-engineered from earlier implementations. Furthermore, at the time of writing, two such competing standards were proposed, and with unclear notions of completeness or cases of distinction.\n", "spans": [[0, 99], [100, 310], [311, 487], [488, 635]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [624, 0, 89, 89, "DAGs"], "s": ["Bags", "DA's", "Dabs", "Dads", "DAG", "Dais", "Dams", "Days", "Digs", "Dogs", "Drags", "Fags", "Gags", "Lags", "Nags", "Rags", "Sags", "Tags", "Wags", "Zags"], "e": "spell"}], "paragraph": "We found that specifying tables involved \\emph{non-linear} reasoning about \\emph{dynamic DAGs}, which we achieved by using abstract data types and  using encoding hints to perform DAG scheduling by reusing our attribute grammar tree scheduler. More dynamic formalisms such as a higher-order attribute grammars~          provide flexible alternatives, but it is not clear how to use them to address the performance criteria of the subsequent chapters.\n", "spans": [[0, 243], [244, 451]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[626, 0, 0, 0, "Several"], [626, 0, 8, 8, "challenges"], [626, 0, 19, 19, "emerged"], [626, 0, 27, 27, "in"], [626, 0, 30, 30, "our"], [626, 0, 34, 34, "analysis"], [626, 0, 43, 43, "of"], [626, 0, 46, 46, "HTML"], [626, 0, 51, 51, "tables"]], "s": " Several challenges emerged in our analysis of HTML tables:.\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 1\r\n\tUnique linkage, cost vector = (UNUSED=1 DIS=0 AND=0 LEN=13)\r\n\r\n    +-------------------------------------Xp--------------------------------\r\n    +---------Wd--------+                 +----Jp----+      +----Jp----+    \r\n    |        +----Dmc---+----Sp----+--MVp-+  +--D*u--+--Mp--+   +--AN--+    \r\n    |        |          |          |      |  |       |      |   |      |    \r\nLEFT-WALL several challenges.n emerged.v in our analysis.n of HTML tables.n \r\n\r\n\r\n----+\r\n    |\r\n    |\r\n    |\r\n[:] . \r\n\r\n", "e": "gram"}], "paragraph": "Several challenges emerged in our analysis of HTML tables:\n", "spans": [[0, 59]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[628, 0, 14, 14, "Dynamic"], [628, 0, 22, 22, "data"]], "s": " Dynamic data .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 4\r\n\tUnique linkage, cost vector = (UNUSED=5 DIS=0 AND=0 LEN=0)\r\n\r\n[Dynamic] [data] [.] \r\n\r\n", "e": "gram"}], "paragraph": "      \\textbf{Dynamic data structure.} Layout constraints guide the mapping from a cell node to its location in the table. The computed result of attribute constraints therefore determines the underlying graph structure rather than being provided as part of the input. \n", "spans": [[0, 37], [37, 122], [123, 270]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[629, 0, 14, 14, "Computing"], [629, 0, 24, 24, "over"], [629, 0, 29, 29, "a"], [629, 0, 31, 31, "DAG"], [629, 0, 35, 35, "rather"]], "s": " Computing over a DAG rather .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 7\r\n\tUnique linkage, cost vector = (UNUSED=8 DIS=0 AND=0 LEN=0)\r\n\r\n[computing] [over] [a] [DAG] [rather] [.] \r\n\r\n", "e": "gram"}, {"i": [[629, 0, 14, 14, "Computing"], [629, 0, 24, 24, "over"], [629, 0, 29, 29, "a"], [629, 0, 31, 31, "DAG"], [629, 0, 35, 35, "rather"], [629, 0, 42, 42, "than"], [629, 0, 47, 47, "tree"], [629, 0, 54, 54, "Each"], [629, 0, 59, 59, "cell"], [629, 0, 64, 64, "of"], [629, 0, 67, 67, "a"], [629, 0, 69, 69, "table"], [629, 0, 75, 75, "has"], [629, 0, 79, 79, "two"], [629, 0, 83, 83, "parent"], [629, 0, 90, 90, "nodes"], [629, 0, 97, 97, "its"], [629, 0, 101, 101, "row"], [629, 0, 105, 105, "and"]], "s": " Computing over a DAG rather than tree Each cell of a table has two p \barent nodes: its row and .\r\nNo complete linkages found.\r\nFound 2 linkages (2 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=4 AND=0 LEN=58)\r\n\r\n    +----------------------------------------------------------Xp------------\r\n    +-------------------------------------------------Xx---------------------\r\n    |          +------------------------------Ss*g---------------------------\r\n    |          +------------MVp-----------+                                  \r\n    |          |        +--Js-+           |                      +--Js--+    \r\n    +----Wd----+---MVp--+  +Ds+     +IDBBU+--I--+--Os-+----Mp----+ +-Ds-+    \r\n    |          |        |  |  |     |     |     |     |          | |    |    \r\nLEFT-WALL computing.g over a DAG rather than tree.v Each [cell] of a table.n \r\n\r\n\r\n---------------------------------------------+\r\n---------------------------+                 |\r\n--+                        |                 |\r\n  +---------Op--------+    |                 |\r\n  |    +------Dmc-----+    +---Js--+         |\r\n  |    |      +---AN--+    |  +-Ds-+         |\r\n  |    |      |       |    |  |    |         |\r\nhas.v two parent.n nodes.n : its row.n [and] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "      \\textbf{Computing over a DAG rather than tree.} Each cell of a table has two parent nodes: its row and its column. Static attribute grammars are more typically designed for computations over trees, where each node has at most one parent. Reasoning about dependencies must support this new structure.\n", "spans": [[0, 52], [52, 120], [121, 243], [244, 306]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [630, 0, 215, 215, "CSS's"], "s": ["Ass's", "CS S's", "CS-S's"], "e": "spell"}], "paragraph": "      \\textbf{Non-linear constraints.} Static attribute grammars linearly bound the computation size in terms of the number of attribute instances. A more iterative process is instead used to compute dimensions for CSS's automatic table layout algorithm.  \n", "spans": [[0, 37], [37, 147], [148, 257]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[633, 0, 0, 0, "Ultimately"], [633, 0, 12, 12, "we"], [633, 0, 15, 15, "wrote"], [633, 0, 21, 21, "table-specific"], [633, 0, 36, 36, "code"], [633, 0, 41, 41, "in"], [633, 0, 44, 44, "the"], [633, 0, 48, 48, "specification"], [633, 0, 62, 62, "(see"], [633, 0, 67, 67, "above)"], [633, 0, 74, 74, "and"], [633, 0, 78, 78, "the"], [633, 0, 82, 82, "runtime"], [633, 0, 91, 91, "but"], [633, 0, 95, 95, "no"], [633, 0, 98, 98, "table-specific"], [633, 0, 113, 113, "code"], [633, 0, 118, 118, "in"], [633, 0, 121, 121, "our"], [633, 0, 125, 125, "scheduler"], [633, 0, 135, 135, "nor"], [633, 0, 139, 139, "code"], [633, 0, 144, 144, "generator"]], "s": " Ultimately, we wrote table-specific code in the specification (see a \bbove) and the runtime, but no table-specific code in our scheduler nor code gene \brator.\r\nNo complete linkages found.\r\nFound 124 linkages (94 had no P.P. violations) at null count 1\r\n\tLinkage 1, cost vector = (UNUSED=1 DIS=3 AND=1 LEN=84)\r\n\r\n    +-----------------------------------------------------------------\r\n    |                          +--------------------------------------\r\n    |                          +--------------------------------------\r\n    +----------Wd---------+    +---------------MVp--------------+     \r\n    |           +----CO---+    +-------------Os------------+    +-----\r\n    |           +--Xc--+  +-Sp-+             +------A------+    |  +--\r\n    |           |      |  |    |             |             |    |  |  \r\nLEFT-WALL ultimately.e , we wrote.v table-specific[!].a code.n in the \r\n\r\n\r\n----------------------------------------Xp--------------------------------\r\n-------------------------------MVp----------------------------------------\r\n--------MVp----------------------------------------------+                \r\n                                                         +----------------\r\nJp-----+-------MXsx-------+                              |          +-----\r\n-D*u---+        +----Xd---+-Xc+                          |          |     \r\n       |        |         |   |                          |          |     \r\nspecification.n ( [see] above ) and the runtime.a , but.misc-ex no.misc-d \r\n\r\n\r\n------------------------------------------------------------------------+\r\n----------------------------+                                           |\r\n                            |                                           |\r\n---Jp------------------+    +-----------------Js-----------------+      |\r\n--------D*u------------+    |  +----------------Ds---------------+      |\r\n         +------A------+    |  |         +-----------AN----------+      |\r\n         |             |    |  |         |                       |      |\r\ntable-specific[!].a code.n in our scheduler[?].n nor code.n generator.n . \r\n\r\n\r\n    +-----------------------------------------------------------------\r\n    |                          +--------------------------------------\r\n    |                          +--------------------------------------\r\n    +----------Wd---------+    +---------------MVp--------------+     \r\n    |           +----CO---+    +-------------Os------------+    +-----\r\n    |           +--Xc--+  +-Sp-+             +------A------+    |  +--\r\n    |           |      |  |    |             |             |    |  |  \r\nLEFT-WALL ultimately.e , we wrote.v table-specific[!].a code.n in the \r\n\r\n\r\n----------------------------------------Xp--------------------------------\r\n-------------------------------MVp----------------------------------------\r\n--------MVp----------------------------------------------+                \r\n                                                         +----------------\r\nJp-----+-------MXsx-------+                              |          +-----\r\n-D*u---+        +----Xd---+-Xc+                          |          |     \r\n       |        |         |   |                          |          |     \r\nspecification.n ( [see] above ) and the runtime.a , but.misc-ex no.misc-d \r\n\r\n\r\n------------------------------------------------------------------------+\r\n----------------------------+                                           |\r\n                            |                                           |\r\n---Jp------------------+    +-----------------Js-----------------+      |\r\n--------D*u------------+    |  +----------------Ds---------------+      |\r\n         +------A------+    |  |                        +---AN---+      |\r\n         |             |    |  |                        |        |      |\r\ntable-specific[!].a code.n in our scheduler[?].n nor code.n generator.n . \r\n\r\n\r\n    +-----------------------------------------------------------------\r\n    |                          +--------------------------------------\r\n    |                          +--------------------------------------\r\n    +----------Wd---------+    +---------------MVp--------------+     \r\n    |           +----CO---+    +-------------Os------------+    +-----\r\n    |           +--Xc--+  +-Sp-+             +------A------+    |  +--\r\n    |           |      |  |    |             |             |    |  |  \r\nLEFT-WALL ultimately.e , we wrote.v table-specific[!].a code.n in the \r\n\r\n\r\n----------------------------------------Xp--------------------------------\r\n-------------------------------MVp----------------------------------------\r\n--------MVp----------------------------------------------+                \r\n       +-----------------MXs----------------+            +----------------\r\nJp-----+        +-------------Xd------------+            |          +-----\r\n-D*u---+        |                    +--DD--+--Xc-+      |          |     \r\n       |        |                    |      |     |      |          |     \r\nspecification.n ( [see] above ) and the runtime.a , but.misc-ex no.misc-d \r\n\r\n\r\n------------------------------------------------------------------------+\r\n----------------------------+                                           |\r\n                            |                                           |\r\n---Jp------------------+    +-----------------Js-----------------+      |\r\n--------D*u------------+    |  +----------------Ds---------------+      |\r\n         +------A------+    |  |         +-----------AN----------+      |\r\n         |             |    |  |         |                       |      |\r\ntable-specific[!].a code.n in our scheduler[?].n nor code.n generator.n . \r\n\r\n\r\n    +-----------------------------------------------------------------\r\n    |                          +--------------------------------------\r\n    |                          +--------------------------------------\r\n    +----------Wd---------+    +---------------MVp--------------+     \r\n    |           +----CO---+    +-------------Os------------+    +-----\r\n    |           +--Xc--+  +-Sp-+             +------A------+    |  +--\r\n    |           |      |  |    |             |             |    |  |  \r\nLEFT-WALL ultimately.e , we wrote.v table-specific[!].a code.n in the \r\n\r\n\r\n----------------------------------------Xp--------------------------------\r\n-------------------------------MVp----------------------------------------\r\n--------MVp----------------------------------------------+                \r\n       +-----------------MXs----------------+            +----------------\r\nJp-----+        +-------------Xd------------+            |          +-----\r\n-D*u---+        |                    +--DD--+--Xc-+      |          |     \r\n       |        |                    |      |     |      |          |     \r\nspecification.n ( [see] above ) and the runtime.a , but.misc-ex no.misc-d \r\n\r\n\r\n------------------------------------------------------------------------+\r\n----------------------------+                                           |\r\n                            |                                           |\r\n---Jp------------------+    +-----------------Js-----------------+      |\r\n--------D*u------------+    |  +----------------Ds---------------+      |\r\n         +------A------+    |  |                        +---AN---+      |\r\n         |             |    |  |                        |        |      |\r\ntable-specific[!].a code.n in our scheduler[?].n nor code.n generator.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "Ultimately, we wrote table-specific code in the specification (see above) and the runtime, but no table-specific code in our scheduler nor code generator. For an example of logic in the specific, the specification constructs the grid data structure  by manipulating functional lists rather than just numbers. Likewise, to ensure a column's computations over its cells are scheduled after the grid is constructed, we included this dependency in the specification. \n", "spans": [[0, 154], [155, 308], [309, 464]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "Our runtime edits were to use a breadth-first traversal for traversing a table and, to lookup the children of a column, search table rows for cells with the corresponding column number attribute. We did not have to add table-specific code into the synthesizer (the offline scheduling analysis) nor the code generator. \n", "spans": [[0, 195], [196, 319]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "We address each problem in turn.\n", "spans": [[0, 33]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[685, 0, 17, 17, "Document"], [685, 0, 26, 26, "layout"]], "s": " Document layout .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 4\r\n\tUnique linkage, cost vector = (UNUSED=5 DIS=0 AND=0 LEN=0)\r\n\r\n[Document] [layout] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\caption{\\textbf{Document layout screenshots.}}\n", "spans": [[0, 45], [45, 48]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[689, 0, 15, 15, "Dynamic"], [689, 0, 23, 23, "data"]], "s": " Dynamic data .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 4\r\n\tUnique linkage, cost vector = (UNUSED=5 DIS=0 AND=0 LEN=0)\r\n\r\n[Dynamic] [data] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\subsubsection{Dynamic data structure.}\n", "spans": [[0, 38], [38, 40]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [690, 0, 16, 16, "docrenderings"], "s": ["Doc renderings", "Doc-renderings"], "e": "spell"}, {"i": [690, 0, 201, 201, "rowspan"], "s": ["rows pan", "rows-pan", "row span", "row-span"], "e": "spell"}, {"i": [690, 0, 227, 227, "colspan"], "s": [], "e": "spell"}, {"i": [690, 0, 337, 337, "left-to-right"], "s": [], "e": "spell"}], "paragraph": "Figure~\\ref{fig:docrenderings} illustrates why the mapping from table cells to table column is dynamically computed. The placement of a cell is complicated by preceding cells that span multiple rows (\"rowspan=n\") and columns (\"colspan=n\"). Ultimately, the cell must be placed in the first column such that an earlier cell in a top-down, left-to-right ordering does not overlap it. The figure shows two important cases. First, the second cell of the first row is placed in the third column because its left sibling spans two rows: a cell's column is a function of the                attributes of its siblings to the left.  The second case is shown for the bottom right cell. Even though it is the third cell of its row in the parse tree, it is not placed in the third column. The reason is that the red dashed rectangular cell in the second row transitively impacts the placement of the cells after it. The                attributes of cells in rows above a cell further determine its column.\n", "spans": [[0, 116], [117, 239], [240, 380], [381, 418], [419, 621], [623, 674], [675, 775], [776, 902], [903, 993]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[692, 0, 0, 0, "Our"], [692, 0, 4, 4, "specification"], [692, 0, 18, 18, "computes"], [692, 0, 27, 27, "the"], [692, 0, 31, 31, "column"], [692, 0, 38, 38, "assignment"], [692, 0, 49, 49, "as"], [692, 0, 52, 52, "a"], [692, 0, 54, 54, "loop"], [692, 0, 59, 59, "over"], [692, 0, 64, 64, "the"], [692, 0, 68, 68, "rows"]], "s": " Our specification computes the column assignment as a loop over the  \brows.\r\nNo complete linkages found.\r\nFound 2 linkages (2 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=2 AND=0 LEN=22)\r\n\r\n    +----------------------------------------------Xp-----------------------\r\n    |                              +---------------MVp---------------+      \r\n    |                              +-----------Os-----------+        |      \r\n    +-------Wd-------+             |      +--------Ds-------+        |      \r\n    |      +---D*u---+------Ss-----+      |      +----AN----+        +------\r\n    |      |         |             |      |      |          |        |      \r\nLEFT-WALL our specification.n computes.v the column.n assignment.n as.p [a] \r\n\r\n\r\n-----------------------+\r\n                       |\r\n                       |\r\n         +----Jp---+   |\r\n-Mp------+   +-Dmc-+   |\r\n         |   |     |   |\r\n[loop] over the rows.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "Our specification computes the column assignment as a loop over the rows. For each row, it computes what columns its cells are placed in as a function of the list of columns that are still occupied by preceding cells. The next row is given the columns that are occupied after adding cells on the current row, etc. Our specification of this behavior is interesting in that it is just calls to functional list manipulation methods written in our host language:\n", "spans": [[0, 73], [74, 217], [218, 313], [314, 459]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[706, 0, 0, 0, "The"], [706, 0, 28, 28, "function"], [706, 0, 37, 37, "computes"], [706, 0, 46, 46, "the"], [706, 0, 50, 50, "column"], [706, 0, 57, 57, "position"], [706, 0, 66, 66, "during"], [706, 0, 73, 73, "placement"], [706, 0, 84, 84, "so"], [706, 0, 87, 87, "subsequent"], [706, 0, 98, 98, "reads"], [706, 0, 104, 104, "can"], [706, 0, 108, 108, "look"], [706, 0, 113, 113, "it"], [706, 0, 116, 116, "up"], [706, 0, 119, 119, "through"], [706, 0, 127, 127, "another"], [706, 0, 135, 135, "list"], [706, 0, 140, 140, "manipulation"], [706, 0, 153, 153, "function"]], "s": " The                         function computes the column position du \bring placement, so subsequent reads can look it up through another list manipula \btion function.\r\nNo complete linkages found.\r\nFound 496 linkages (38 had no P.P. violations) at null count 4\r\n\tLinkage 1, cost vector = (UNUSED=4 DIS=2 AND=0 LEN=46)\r\n\r\n    +--------------------------------------------------------------\r\n    |              +------------------------------CC---------------\r\n    |              |          +---------------MVp--------------+   \r\n    |              |          +-----------Os----------+        |   \r\n    +------Wd------+          |      +-------Ds-------+        |   \r\n    |      +---Ds--+----Ss----+      |      +----AN---+        +---\r\n    |      |       |          |      |      |         |        |   \r\nLEFT-WALL the function.n computes.v the column.n position.n during \r\n\r\n\r\n-----------------------Xp----------------------------------------------------\r\n---------------+                                                             \r\n               |                                                             \r\n               |                                        +--------------------\r\n               |                        +-------I-------+               +----\r\nJp---+      +Xd+-----------Qd-----------+----SIs----+   |               |    \r\n     |      |  |                        |           |   |               |    \r\nplacement.n , so [subsequent] [reads] can.v [look] it up.v [through] another \r\n\r\n\r\n---------------------------------+\r\n                                 |\r\n                                 |\r\n---Os----------------------+     |\r\n-----------Ds--------------+     |\r\n   +----AN----+-----AN-----+     |\r\n   |          |            |     |\r\nlist.n manipulation.n function.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "The                         function computes the column position during placement, so subsequent reads can look it up through another list manipulation function.\n", "spans": [[0, 163]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[740, 0, 17, 17, "Specifying"], [740, 0, 28, 28, "dynamic"]], "s": " Specifying dynamic .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 4\r\n\tUnique linkage, cost vector = (UNUSED=5 DIS=0 AND=0 LEN=0)\r\n\r\n[specifying] [dynamic] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\caption{\\textbf{Specifying dynamic dependencies.}}\n", "spans": [[0, 49], [49, 52]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [744, 0, 462, 462, "fig"], "s": [], "e": "spell"}, {"i": [744, 0, 638, 638, "enabling"], "s": ["low level", "low-level"], "e": "spell"}, {"i": [744, 0, 691, 691, "fig"], "s": [], "e": "spell"}, {"i": [744, 0, 802, 802, "fig"], "s": [], "e": "spell"}], "paragraph": "A column computes the x coordinates for each cell, but column cells are not known before the last                        () call. To ensure a column computes over its cells after the mapping occurs, we explicitly declare the dynamic data dependency in the specification. First, the grid is stored in an attribute, so we simply propagate the grid to all the table nodes as an attribute (                 ). We then state the implicit data dependency (Figure~\\ref{fig:tabledyndep}. The scheduler now knows to run column computations over cells only after the                   is computed. Currently, we directly specify the constraints by enabling low-level schedule constraints (Figure~\\ref{fig:tabledyndep:raw} and Section~[[[???]]), which might be directly generated from surface syntax (Figure~\\ref{fig:tabledyndep:clean}).\n", "spans": [[0, 129], [130, 270], [271, 405], [406, 479], [480, 587], [588, 730], [730, 827]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[746, 0, 15, 15, "Computing"]], "s": " Computing .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 3\r\n\tUnique linkage, cost vector = (UNUSED=4 DIS=0 AND=0 LEN=0)\r\n\r\n[computing] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\subsubsection{Computing over a DAG}\n", "spans": [[0, 37]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "Computing over a table means computing over a DAG, not a tree: a cell has both a row and a column as its parents. This impacted both our runtime and our specification strategy. Demonstrating the flexibility of attribute grammars, we did not have to modify the scheduler nor the code generator. Instead, we modified the runtime and the specification.\n", "spans": [[0, 113], [114, 176], [177, 293], [294, 350]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "We modified the runtime to generalize an important invariant from tree traversals to DAG traversals. In a top down traversal of a tree, a node's parent is visited before the node itself. A valid implementation for trees is depth first. However, consider a depth first traversal of a table's parse tree:\n", "spans": [[0, 100], [101, 186], [187, 235], [236, 303]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[758, 0, 0, 0, "The"], [758, 0, 4, 4, "depth-first"], [758, 0, 16, 16, "traversal"], [758, 0, 26, 26, "would"], [758, 0, 32, 32, "visit"], [758, 0, 38, 38, "the"], [758, 0, 42, 42, "table"], [758, 0, 49, 49, "the"], [758, 0, 53, 53, "row"], [758, 0, 58, 58, "the"], [758, 0, 62, 62, "cell"], [758, 0, 68, 68, "and"], [758, 0, 72, 72, "then"], [758, 0, 77, 77, "the"], [758, 0, 81, 81, "column"]], "s": " The depth-first traversal would visit the table, the row, the cell,  \band then the column.\r\nNo complete linkages found.\r\nFound 158 linkages (52 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=6 AND=0 LEN=22)\r\n\r\n                                                        +-----------MXs----\r\n                                                        +-----MXs----+     \r\n                                            +-----Os----+    +---Xd--+   +-\r\n +-----D----+-----------S-----------+---I---+     +--Ds-+    |  +-Ds-+Xca+ \r\n |          |                       |       |     |     |    |  |    |   | \r\nthe depth-first[!].n [traversal] would.v visit.v the table.n , the row.n , \r\n\r\n\r\n-------+                              \r\n       |                              \r\n--Xd---+                              \r\n +--Ds-+--------------Xc-------------+\r\n |     |                             |\r\nthe cell.n , and [then] the column.n . \r\n\r\n\r\n                                                        +------------------\r\n                                                        +-----MXs----+     \r\n                                            +-----Os----+    +---Xd--+   +-\r\n +-----D----+-----------S-----------+---I---+     +--Ds-+    |  +-Ds-+Xca+ \r\n |          |                       |       |     |     |    |  |    |   | \r\nthe depth-first[!].n [traversal] would.v visit.v the table.n , the row.n , \r\n\r\n\r\n------MXs-----------------------+     \r\n                                |     \r\n---------------Xd---------------+     \r\n                         +--Ds--+-Xc-+\r\n                         |      |    |\r\nthe cell.n , and [then] the column.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}, {"i": [[758, 0, 0, 0, "The"], [758, 0, 4, 4, "depth-first"], [758, 0, 16, 16, "traversal"], [758, 0, 26, 26, "would"], [758, 0, 32, 32, "visit"], [758, 0, 38, 38, "the"], [758, 0, 42, 42, "table"], [758, 0, 49, 49, "the"], [758, 0, 53, 53, "row"], [758, 0, 58, 58, "the"], [758, 0, 62, 62, "cell"], [758, 0, 68, 68, "and"], [758, 0, 72, 72, "then"], [758, 0, 77, 77, "the"], [758, 0, 81, 81, "column"], [758, 0, 89, 89, "The"], [758, 0, 93, 93, "cell"], [758, 0, 98, 98, "is"], [758, 0, 101, 101, "visited"], [758, 0, 109, 109, "before"], [758, 0, 116, 116, "its"], [758, 0, 120, 120, "parent"], [758, 0, 127, 127, "column"]], "s": " The depth-first traversal would visit the table, the row, the cell,  \band then the column The cell is visited before its parent column!.\r\nNo complete linkages found.\r\nFound 332 linkages (32 had no P.P. violations) at null count 2\r\n\tLinkage 1, cost vector = (UNUSED=2 DIS=8 AND=0 LEN=64)\r\n\r\n    +------------------------------------------------------------------------\r\n    |                              +---------------------------------CC------\r\n    |                              |                                         \r\n    |                              |                              +-----MXs--\r\n    +--------------Wd--------------+                  +-----Os----+    +---Xd\r\n    |      +-----------DD----------+----Sp----+---I---+     +--Ds-+    |  +-D\r\n    |      |                       |          |       |     |     |    |  |  \r\nLEFT-WALL the [depth-first] traversal[!].a would.v visit.v the table.n , the \r\n\r\n\r\n--------------------Xp-------------------------------------------------\r\n---------------------------+----------------Wdc---------------+        \r\n  +-------Xc-------+       |          +-----------CO----------+        \r\n--+-----MXs----+   |       |          |    +--------Ds--------+        \r\n--+   +---Xd---+   |       |          |    |      +-----AN----+        \r\ns-+   |  +--Ds-+Xca+       |          |    |      |     +--AN-+--Ss-+--\r\n  |   |  |     |   |       |          |    |      |     |     |     |  \r\nrow.n , the cell.n , and.misc-opnr then.r the column.n The cell.n is.v \r\n\r\n\r\n-------------------------------------------+\r\n                                           |\r\n                                           |\r\n             +---------Js---------+        |\r\n             |    +-------Ds------+        |\r\nPv--+---MVp--+    |      +---AN---+        |\r\n    |        |    |      |        |        |\r\nvisited.v before its parent.n column.n [!] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "The depth-first traversal would visit the table, the row, the cell, and then the column. The cell is visited before its parent column! \n", "spans": [[0, 88], [89, 136]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[760, 0, 0, 0, "Our"], [760, 0, 4, 4, "modification"], [760, 0, 17, 17, "was"], [760, 0, 21, 21, "simple"], [760, 0, 29, 29, "we"], [760, 0, 32, 32, "edited"], [760, 0, 39, 39, "the"], [760, 0, 43, 43, "runtime"], [760, 0, 51, 51, "to"], [760, 0, 54, 54, "visit"], [760, 0, 60, 60, "the"], [760, 0, 64, 64, "nodes"], [760, 0, 70, 70, "of"], [760, 0, 73, 73, "a"], [760, 0, 75, 75, "table"], [760, 0, 81, 81, "with"], [760, 0, 86, 86, "a"], [760, 0, 88, 88, "breadth"], [760, 0, 96, 96, "first"], [760, 0, 102, 102, "traversal"], [760, 0, 113, 113, "We"], [760, 0, 116, 116, "kept"], [760, 0, 121, 121, "the"], [760, 0, 125, 125, "overall"], [760, 0, 133, 133, "document"], [760, 0, 142, 142, "traversal"], [760, 0, 152, 152, "as"], [760, 0, 155, 155, "depth"], [760, 0, 161, 161, "first"], [760, 0, 167, 167, "for"], [760, 0, 171, 171, "performance"], [760, 0, 183, 183, "reasons"]], "s": " Our modification was simple: we edited the runtime to visit the node \bs of a table with a breadth first traversal We kept the overall document travers \bal as depth first for performance reasons.\r\nNo complete linkages found.\r\nFound 456 linkages (200 had no P.P. violations) at null count 1\r\n\tLinkage 1, cost vector = (UNUSED=1 DIS=9 AND=0 LEN=68)\r\n\r\n    +------------------------------------------------------------------------\r\n    |                                                                        \r\n    +-------------------Xx------------------+        +---------MVi--------+  \r\n    +-------Wd-------+                      |        +-----Op-----+       |  \r\n    |      +---D*u---+----Ss---+--Paf--+    +Wd+--Sp-+     +--DD--+       +--\r\n    |      |         |         |       |    |  |     |     |      |       |  \r\nLEFT-WALL our modification.n was.v simple.a : we edited.v the runtime.a to.r \r\n\r\n\r\n---------------------------------------------------Xp-------------------------\r\n                                   +---------------------------------Osn------\r\n   +--------------MVp--------------+-------------------Js-------------------+ \r\n   +-----Op----+     +--Js--+      |                   +---------AN---------+ \r\nI--+     +-Dmc-+--Mp-+ +-Ds-+      |          +---AN---+           +----A---+-\r\n   |     |     |     | |    |      |          |        |           |        | \r\nvisit.v the nodes.n of a table.n with [a] breadth.n first.n traversal[!].a We \r\n\r\n\r\n--------------------------------------------------------------------------\r\n--------------------------+                                               \r\n                          |            +--------------MVp-------------+   \r\n        +--------Ds-------+            +----------MVa----------+      +---\r\nMv-+    |      +-----A----+-----Ma-----+---MVp---+--Jp-+       |      |   \r\n   |    |      |          |            |         |     |       |      |   \r\nkept.v the overall.a document.n traversal[!].a as.p depth.n first.a for.p \r\n\r\n\r\n------------------------+\r\n                        |\r\n                        |\r\n-------Jp---------+     |\r\n      +-----AN----+     |\r\n      |           |     |\r\nperformance.n reasons.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "Our modification was simple: we edited the runtime to visit the nodes of a table with a breadth first traversal. We kept the overall document traversal as depth first for performance reasons. Declarative schedule constraints would also support picking a breadth-first traversal (Section~\\ref{???}).\n", "spans": [[0, 112], [113, 191], [192, 295], [295, 299]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "We also modified the specification to pass our attribute grammar static checker. The changes enables relaxing the scheduler's obligation to guarantee that visiting a cell's parent row and column would set all the attributes needed by the cell (unambiguous) and without conflicting with each other. For example, a column defines the             attribute of its child cell, and a row, its            . By default, our checker would rightfully reject such a specification because, if a cell has only one parent, only one of those attributes would be set.\n", "spans": [[0, 80], [81, 297], [298, 400], [401, 553]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[764, 0, 0, 0, "We"], [764, 0, 3, 3, "extended"], [764, 0, 12, 12, "the"], [764, 0, 16, 16, "specification"], [764, 0, 30, 30, "language"], [764, 0, 39, 39, "for"], [764, 0, 43, 43, "instructing"], [764, 0, 55, 55, "the"], [764, 0, 59, 59, "scheduler"], [764, 0, 69, 69, "that"], [764, 0, 74, 74, "external"], [764, 0, 83, 83, "code"], [764, 0, 88, 88, "defines"], [764, 0, 96, 96, "certain"], [764, 0, 104, 104, "attributes"]], "s": " We extended the specification language for instructing the scheduler \b that external code defines certain attributes:.\r\nNo complete linkages found.\r\nFound 14 linkages (2 had no P.P. violations) at null count 1\r\n\tLinkage 1, cost vector = (UNUSED=1 DIS=2 AND=0 LEN=38)\r\n\r\n    +----------------------------------------------------------------------\r\n    |                                                              +-------\r\n    |      +----------------------CC---------------------+         +-------\r\n    |      |      +--------------Os--------------+       |         |       \r\n    |      |      |      +----------D*u----------+       |         |       \r\n    +--Wd--+--Sp--+      |         +------AN-----+       +----Wd---+       \r\n    |      |      |      |         |             |       |         |       \r\nLEFT-WALL we extended.v the specification.n language.n for.r instructing.g \r\n\r\n\r\n-------Xp------------------------------------------------------------\r\n---------------------Ss*g----------------------------+               \r\n------------------Os-------------------------+       |               \r\n +--------------------D*u--------------------+       |               \r\n |         +----------------A----------------+       +----------Op---\r\n |         |            +-----EA----+----A---+       |         +-----\r\n |         |            |           |        |       |         |     \r\nthe scheduler[?].a that.misc-r external.a code.n defines.v certain.a \r\n\r\n\r\n-----------------+\r\n                 |\r\n                 |\r\n                 |\r\n------+          |\r\nA-----+          |\r\n      |          |\r\nattributes.n [:] . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "We extended the specification language for instructing the scheduler that external code defines certain attributes:\n", "spans": [[0, 116]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [777, 0, 133, 133, "row's"], "s": ["brow's", "how's", "prow's", "Rob's", "rod's", "Ron's", "rows", "Roy's", "sow's"], "e": "spell"}], "paragraph": "The scheduler now assumes that the external code provides definitions for a column's                    and                    and a row's                    and                   . Unimportant to the synthesizer, the definitions just happen to come from elsewhere in the same specification, such as class Row defining the phantom attributes not set by Column. %If we wanted to further verify our specification, we could further specify that the assignments of a row and a column to a cell are disjoint sets that, together, hold the assignments needed for a cell, but this is unnecessary for code generation. \n", "spans": [[0, 181], [182, 360], [361, 610]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "\\subsubsection{Non-linear constraints}\n", "spans": [[0, 39]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "The table specification defines a dynamically determined number of loops over a table's column to determine column widths. Such dynamism is beyond the pure static attribute grammar formalism, but our foreign function interface sufficed while still allowing overall specification and scheduling through attribute grammars.\n", "spans": [[0, 122], [123, 322]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[782, 0, 12, 12, "Flow-based"], [782, 0, 24, 24, "CSS"]], "s": " Flow-based: CSS .\r\nNo complete linkages found.\r\nFound 1 linkage (1 had no P.P. violations) at null count 5\r\n\tUnique linkage, cost vector = (UNUSED=6 DIS=0 AND=0 LEN=0)\r\n\r\n[Flow-based] [:] [CSS] [.] \r\n\r\n", "e": "gram"}], "paragraph": "\\subsection{Flow-based: CSS Box Model}\n", "spans": [[0, 39]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "Document layout languages generally feature a \\emph{flow-based} layout model where the position of one element is largely a function of the previous one. For example, line wrapping places one word after another in a paragraph, and a column will stack one paragraph after another. However, ambiguity quickly arises once constraints are added to such systems. We found that, before being able to address our interest in parallelizing the CSS language, that creating a functional specification of it was already a challenge to itself.  This section focuses on the ability to express the CSS specification, and defers discussion of functional correctness (Chapter~??) and safe parallelization (Chapter~??).\n", "spans": [[0, 153], [154, 279], [280, 357], [358, 531], [533, 662], [662, 700], [700, 703]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [785, 0, 158, 158, "shrink-to-fit"], "s": [], "e": "spell"}, {"i": [785, 0, 343, 343, "reengineering"], "s": ["re engineering", "re-engineering"], "e": "spell"}, {"i": [785, 0, 547, 547, "Wikipedia"], "s": [], "e": "spell"}, {"i": [785, 0, 594, 594, "css"], "s": ["ass", "CS", "CSS", "CST", "cuss", "CVS"], "e": "spell"}], "paragraph": "Challenging specification, the CSS standard provides only a few explicit formulas such as                                                             for the shrink-to-fit calculation. It generally does not fully define the intrinsic dimensions to plug into the formula. We incorporated what we found, and for the rest, spent significant time reengineering the semantics by examining the standard and experimenting with existing browsers. While it is unclear how to evaluate faithfulness, we encoded enough features to render a resemblance of the Wikipedia main page (Figure~\\ref{fig:rendering:css}) and a popular blog.\n", "spans": [[0, 184], [185, 270], [271, 438], [439, 620]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [787, 0, 906, 906, "inlines)"], "s": ["inclines", "in lines", "in-lines"], "e": "spell"}], "paragraph": "Our attribute grammar describes the layout solving features of the informally written CSS 2.1 standard. It also includes automatic table layout, which was only more completely defined in later CSS standards. It does not include preprocessing steps, such as the CSS cascade that annotates the HTML tree with attributes, nor anonymous content generation, which normalizes the annotated tree to guarantee that spans of sibling nodes are homogeneous. The former is largely a combination of a simple extension to regular expressions and prioritization constraints. We found we could include parts of the cascade in our approach, such as handling units, and thus do.  Normalization is a bottom-up tree rewriting pass, and an implementation optimization avoids performing it before layout and instead makes it an on-demand part of layout solving. We primarily focus in the core box model: normal flow (blocks and inlines), out of flow (relative and absolute positioning, floats), and borders, padding, and margins.\n", "spans": [[0, 103], [104, 207], [208, 446], [447, 559], [560, 660], [662, 839], [840, 1008]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [789, 0, 365, 365, "CSS's"], "s": ["Ass's", "CS S's", "CS-S's"], "e": "spell"}], "paragraph": "Our specification largely follows the style of the above grammars. Part of the intuition for the feasibility of specifying CSS in this way is that CSS was designed with restrictions that avoid requiring slow evaluation with techniques such as iterative constraint solving. In our encoding, each CSS display type is represented by one or more classes in our system. CSS's normalization algorithm largely leads to our set of interfaces, such as grouping the               and                     display types under interface              . We make heavy use of traits and interfaces, which compromise 23 % and 32 % of the code, respectively. The automatic table layout algorithm was an extension of the above techniques. Finally, similar to the issue with table cells having two parents, a row and a column, out of flow elements also required encodings to support DAG behavior. \n", "spans": [[0, 66], [67, 272], [273, 364], [365, 538], [539, 640], [641, 719], [720, 878]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [[791, 0, 0, 0, "Several"], [791, 0, 8, 8, "differences"], [791, 0, 20, 20, "distinguish"], [791, 0, 32, 32, "our"], [791, 0, 36, 36, "experience"], [791, 0, 47, 47, "with"], [791, 0, 52, 52, "specifying"], [791, 0, 63, 63, "CSS"], [791, 0, 67, 67, "layout"], [791, 0, 74, 74, "from"], [791, 0, 79, 79, "the"], [791, 0, 83, 83, "other"], [791, 0, 89, 89, "case"], [791, 0, 94, 94, "studies"]], "s": " Several differences distinguish our experience with specifying CSS l \bayout from the other case studies.\r\nNo complete linkages found.\r\nFound 18 linkages (18 had no P.P. violations) at null count 1\r\n\tLinkage 1, cost vector = (UNUSED=1 DIS=0 AND=0 LEN=24)\r\n\r\n    +------------------------------------------------------------Xp-\r\n    |                                 +------------MVp-----------+  \r\n    +---------Wd--------+             +--------Os-------+        |  \r\n    |        +----Dmc---+------Sp-----+        +---D*u--+        +--\r\n    |        |          |             |        |        |        |  \r\nLEFT-WALL several differences.n distinguish.v our experience.n with \r\n\r\n\r\n----------------------------------------------------------+\r\n                            +-----------Jp----------+     |\r\n      +---------MVp---------+        +------Dmc-----+     |\r\n-Mgp--+---Os--+             |   +-DD-+      +---AN--+     |\r\n      |       |             |   |    |      |       |     |\r\nspecifying.v CSS [layout] from the other case.n studies.n . \r\n\r\nPress RETURN for the next linkage.\r\n", "e": "gram"}], "paragraph": "Several differences distinguish our experience with specifying CSS layout from the other case studies. Many features were difficult to specify because of many cases or cross-cutting in their semantics. Discussed in Chapter~         , we rely upon automatic checking to assist development, and discussed in Chapter~         , we specify schedule sketches to improve compiler speed and more quickly experiment with parallelization schemes. To further simplify development, we wrote several increasingly large specifications and manually integrated them.\n", "spans": [[0, 102], [103, 201], [202, 437], [438, 552]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "One particularly challenging feature to disentangle relates to ambiguity. CSS  solves seemingly inconsistent input constraints instead of returning an error. For example, if        was extended to support input heights on intermediate nodes, the following conflict would require a graceful interpretation rather than refusing to render:\n", "spans": [[0, 73], [74, 157], [158, 337]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "By the original attribute grammar, the outer               should be the size of the biggest child, which would be 500. However, that conflicts with the input constraint of the outer box only being 5 tall. Our CSS grammar inspects for the presence of input attributes and prioritizes them. The analogous resolution for the        example is the following:\n", "spans": [[0, 119], [120, 205], [206, 289], [290, 356]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "The grammar uses \"5\" and \"500\" because they were explicitly specified instead of solving for them.  \n", "spans": [[0, 101]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [810, 0, 232, 232, "na"], "s": ["an", "DA", "DNA", "ha", "la", "ma", "nab", "nag", "Nan", "nap", "Nat", "nay", "nd", "nm", "no", "NSA", "pa", "QA", "TA"], "e": "spell"}, {"i": [810, 0, 239, 239, "vely"], "s": ["bely", "rely", "very"], "e": "spell"}], "paragraph": "We found other features to be difficult because they purposefully stray from the direct mathematical interpretation. For example, CSS supports input constraints where a node's width is defined as a proportion of its parent's. If we na \"{i}vely extended        with such a feature, evaluation of the following layout would lead to a degenerate solution:\n", "spans": [[0, 116], [117, 225], [226, 353]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "The root node shrinks to fit the middle node, but the middle node must be 50 % of the parent. Direct interpretation leads to a solution of 0 for both widths, but CSS instead leaves the result up to the layout engine implementation. The first reason is that the result looks unappealing: the containers of the leaf node do not appear. The second reason is that, while iterative solvers may avoid some such situations, but at the expense of performance. Implementations instead use non-iterative heuristics, but as seen with tables, implementors struggle to understand them.\n", "spans": [[0, 93], [94, 231], [232, 333], [334, 451], [452, 573]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "In summary, our attribute grammar formalism was sufficiently flexible to specify a non-trivial subset of the widely used CSS language. We encountered several key difficulties, and discuss those relating to correctness, safe and effective parallelization, and compiler speed in Chapters~\\ref{???} and~\\ref{???}.\n", "spans": [[0, 134], [135, 294], [294, 308], [308, 311]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [], "paragraph": "\\section{Related Work}\n", "spans": [[0, 23]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [825, 0, 32, 32, "impl"], "s": ["imp", "impel", "imply", "imps"], "e": "spell"}, {"i": [825, 0, 47, 47, "(JavaScript)"], "s": ["Java Script", "Java-Script"], "e": "spell"}], "paragraph": "      loose formalisms: browser impl (C++), d3 (JavaScript), latex formulas (ML)\n", "spans": [[0, 81]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [826, 0, 29, 29, "cassowary"], "s": [], "e": "spell"}, {"i": [826, 0, 43, 43, "hp"], "s": ["ha", "hap", "he", "hi", "hip", "ho", "hop", "HP", "Hz", "IP", "Ph", "pH", "up"], "e": "spell"}], "paragraph": "      restricted formalisms: cassowary and hp, UREs\n", "spans": [[0, 52]], "file": "../../thesis/template/chap2.tex"}
,
{"errors": [{"i": [827, 0, 6, 6, "AGs"], "s": ["Ads", "AFS", "Age", "Ages", "Ago", "Ams", "As", "Ass", "Bags", "Fags", "Gags", "Gas", "Lags", "Nags", "Rags", "Sags", "Tags", "Wags", "Zags"], "e": "spell"}, {"i": [827, 0, 11, 11, "html"], "s": ["HTML"], "e": "spell"}], "paragraph": "      AGs: html tables\n", "spans": [[0, 23]], "file": "../../thesis/template/chap2.tex"}
]
